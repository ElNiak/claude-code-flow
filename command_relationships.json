{
  "command_relationships": {
    "metadata": {
      "generated_at": "2025-07-13T06:13:59.000Z",
      "cli_version": "1.0.71",
      "relationship_types": [
        "dependencies",
        "hierarchical",
        "functional_overlap",
        "data_flow",
        "execution_order",
        "integration_points"
      ]
    },
    "dependency_graph": {
      "core_dependencies": {
        "start": {
          "depends_on": ["config"],
          "enables": ["agent", "task", "memory", "monitor", "session"],
          "description": "Foundation service that must be running for other commands"
        },
        "config": {
          "depends_on": [],
          "enables": ["start", "agent", "swarm", "hive", "sparc"],
          "description": "Configuration foundation for all system operations"
        },
        "memory": {
          "depends_on": ["config"],
          "enables": ["agent", "task", "swarm", "hive", "session", "hook"],
          "description": "Persistent storage foundation for stateful operations"
        }
      },
      "orchestration_dependencies": {
        "swarm": {
          "depends_on": ["memory", "agent", "task", "hook"],
          "enables": ["hive", "sparc"],
          "integrates_with": ["monitor", "session"],
          "description": "Multi-agent coordination requiring agent and task management"
        },
        "hive": {
          "depends_on": ["swarm", "memory", "agent"],
          "extends": ["swarm"],
          "integrates_with": ["hook", "monitor"],
          "description": "Advanced swarm with consensus mechanisms"
        },
        "hive-mind": {
          "depends_on": ["hive", "memory", "agent", "task"],
          "extends": ["hive"],
          "integrates_with": ["hook", "monitor", "session"],
          "description": "Collective intelligence requiring full orchestration stack"
        }
      },
      "development_dependencies": {
        "sparc": {
          "depends_on": ["config", "memory"],
          "integrates_with": ["agent", "task", "workflow", "hook"],
          "description": "Development methodology requiring configuration and state"
        },
        "workflow": {
          "depends_on": ["task", "agent", "memory"],
          "integrates_with": ["sparc", "hook", "session"],
          "description": "Process automation requiring task and agent management"
        }
      }
    },
    "hierarchical_relationships": {
      "command_families": {
        "orchestration_family": {
          "parent": "swarm",
          "children": ["hive", "hive-mind"],
          "shared_capabilities": ["multi-agent coordination", "task distribution", "result aggregation"]
        },
        "management_family": {
          "parent": "agent",
          "children": ["agent-simple"],
          "shared_capabilities": ["agent lifecycle", "resource management", "status monitoring"]
        },
        "memory_family": {
          "parent": "memory",
          "children": ["advanced-memory-commands"],
          "shared_capabilities": ["data persistence", "namespace management", "retrieval optimization"]
        },
        "development_family": {
          "parent": "sparc",
          "children": ["workflow"],
          "shared_capabilities": ["structured methodologies", "process automation", "result validation"]
        }
      },
      "subcommand_hierarchies": {
        "agent": {
          "lifecycle_commands": ["create", "start", "stop", "delete"],
          "management_commands": ["list", "show"],
          "execution_order": "create → start → [use] → stop → delete"
        },
        "task": {
          "lifecycle_commands": ["create", "cancel"],
          "monitoring_commands": ["list", "status"],
          "execution_order": "create → [execute] → status → [complete|cancel]"
        },
        "memory": {
          "data_commands": ["store", "get", "delete"],
          "management_commands": ["list", "clear"],
          "execution_order": "store → get → [use] → delete|clear"
        },
        "hive-mind": {
          "setup_commands": ["init", "spawn"],
          "management_commands": ["status", "task"],
          "utility_commands": ["wizard", "optimize-memory"],
          "execution_order": "init → spawn → task → status → optimize-memory"
        }
      }
    },
    "functional_overlap": {
      "agent_management": {
        "primary": "agent",
        "secondary": ["swarm", "hive", "hive-mind"],
        "overlap_areas": ["agent creation", "lifecycle management", "resource allocation"],
        "differentiation": "agent provides fine-grained control, orchestration commands provide collective management"
      },
      "task_coordination": {
        "primary": "task", 
        "secondary": ["workflow", "sparc", "swarm"],
        "overlap_areas": ["task creation", "execution tracking", "dependency management"],
        "differentiation": "task provides granular control, others provide higher-level orchestration"
      },
      "monitoring_capabilities": {
        "primary": "monitor",
        "secondary": ["status", "hook", "session"],
        "overlap_areas": ["system health", "performance metrics", "event tracking"],
        "differentiation": "monitor provides real-time analytics, others provide point-in-time snapshots"
      },
      "configuration_management": {
        "primary": "config",
        "secondary": ["hook", "session", "sparc"],
        "overlap_areas": ["settings management", "profile handling", "environment configuration"],
        "differentiation": "config provides core settings, others provide specialized configuration"
      }
    },
    "data_flow_relationships": {
      "memory_flows": {
        "producers": ["agent", "task", "swarm", "hive", "sparc", "hook"],
        "consumers": ["session", "monitor", "workflow", "status"],
        "flow_patterns": [
          "agent execution → memory storage → session restoration",
          "swarm coordination → memory sharing → result aggregation",
          "hook events → memory logging → performance analysis"
        ]
      },
      "event_flows": {
        "producers": ["agent", "task", "swarm", "start"],
        "consumers": ["hook", "monitor", "session"],
        "flow_patterns": [
          "agent lifecycle events → hooks → automation actions",
          "task execution events → monitoring → performance metrics",
          "swarm coordination events → session tracking → progress reports"
        ]
      },
      "configuration_flows": {
        "source": "config",
        "consumers": ["agent", "swarm", "hive", "sparc", "workflow"],
        "flow_patterns": [
          "config changes → agent reconfiguration → behavior updates",
          "profile selection → swarm strategy → execution parameters"
        ]
      }
    },
    "execution_order_dependencies": {
      "system_startup": {
        "sequence": ["config", "start", "memory", "agent", "monitor"],
        "description": "Typical system initialization order",
        "critical_path": ["config", "start"]
      },
      "swarm_execution": {
        "sequence": ["config", "memory", "agent", "swarm", "hook", "monitor"],
        "description": "Swarm-based task execution workflow",
        "critical_path": ["memory", "agent", "swarm"]
      },
      "development_workflow": {
        "sequence": ["config", "sparc", "workflow", "task", "hook", "session"],
        "description": "SPARC-based development methodology",
        "critical_path": ["config", "sparc"]
      },
      "research_workflow": {
        "sequence": ["config", "memory", "hive", "sparc", "session", "monitor"],
        "description": "Research and analysis workflow with consensus",
        "critical_path": ["memory", "hive"]
      }
    },
    "integration_points": {
      "hook_integrations": {
        "pre_task_hooks": {
          "triggered_by": ["agent", "task", "swarm", "sparc"],
          "effects": ["resource validation", "dependency checking", "environment setup"]
        },
        "post_task_hooks": {
          "triggered_by": ["agent", "task", "swarm", "sparc"],
          "effects": ["result storage", "performance logging", "cleanup operations"]
        },
        "session_hooks": {
          "triggered_by": ["session", "repl"],
          "effects": ["state persistence", "context restoration", "audit logging"]
        }
      },
      "memory_integrations": {
        "cross_session_state": {
          "providers": ["session", "agent", "swarm"],
          "consumers": ["session", "workflow", "sparc"],
          "use_cases": ["workflow resumption", "agent state restoration", "progress tracking"]
        },
        "coordination_memory": {
          "providers": ["swarm", "hive", "hive-mind"],
          "consumers": ["monitor", "status", "hook"],
          "use_cases": ["consensus tracking", "performance optimization", "coordination analytics"]
        }
      },
      "monitoring_integrations": {
        "real_time_monitoring": {
          "sources": ["agent", "task", "swarm", "hive"],
          "destinations": ["monitor", "status", "hook"],
          "metrics": ["performance", "resource usage", "error rates", "completion status"]
        },
        "event_monitoring": {
          "sources": ["hook", "session", "workflow"],
          "destinations": ["monitor", "memory", "status"],
          "events": ["lifecycle changes", "automation triggers", "system events"]
        }
      }
    },
    "conflict_resolution": {
      "resource_conflicts": {
        "agent_limits": {
          "conflicting_commands": ["agent create", "swarm", "hive"],
          "resolution": "Shared agent pool with resource allocation",
          "coordination_mechanism": "Agent manager with resource limits"
        },
        "memory_namespace": {
          "conflicting_commands": ["memory", "session", "swarm"],
          "resolution": "Namespace isolation and conflict detection",
          "coordination_mechanism": "Memory manager with namespace validation"
        }
      },
      "execution_conflicts": {
        "concurrent_orchestration": {
          "conflicting_commands": ["swarm", "hive", "workflow"],
          "resolution": "Execution queue with priority management",
          "coordination_mechanism": "Task scheduler with conflict detection"
        },
        "configuration_changes": {
          "conflicting_commands": ["config", "agent", "swarm"],
          "resolution": "Configuration validation and rollback",
          "coordination_mechanism": "Config manager with change validation"
        }
      }
    }
  }
}