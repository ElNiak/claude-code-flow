#!/usr/bin/env node

/**
 * Build script for ./bin/claude-flow.js
 * Generates the NPM bin entry point with current version
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Read current version from package.json
const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '../package.json'), 'utf8'));
const version = packageJson.version;

// Template for the bin file
const binTemplate = `#!/usr/bin/env node

/**
 * Claude-Flow v${version} - Node.js Entry Point
 *
 * This file is the main entry point for NPM/NPX execution.
 * It executes the built distribution files with proper error handling.
 *
 * Generated by: scripts/build-bin-js.js
 * Version: ${version}
 * Build time: ${new Date().toISOString()}
 */

import { fileURLToPath } from 'url';
import { dirname, join, resolve } from 'path';
import { existsSync } from 'fs';
import { spawn } from 'child_process';
import process from 'process';

// Dynamic version loading
async function getVersion() {
  try {
    // Try to load version from our utility
    const versionModule = await import('../dist/utils/version.js');
    return versionModule.getVersion();
  } catch {
    // Fallback to built-in version
    return '${version}';
  }
}

// Get script directory and root directory
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const ROOT_DIR = resolve(__dirname, '..');

// Parse arguments
const args = process.argv.slice(2);
if (args.length === 0) {
  args.push('--help');
}

// Handle version requests immediately with dynamic version
for (const arg of args) {
  if (arg === '--version' || arg === '-v') {
    try {
      const version = await getVersion();
      console.log(\`v\${version}\`);
      process.exit(0);
    } catch (error) {
      console.log('v${version}'); // Fallback
      process.exit(0);
    }
  }
}

/**
 * Main execution function with priority-based runtime selection
 */
async function main() {
  try {
    // Priority 1: Use bundled NPM version (like PKG binary - enhanced features, no import issues)
    const bundledNpm = join(ROOT_DIR, 'dist', 'cli', 'main-npm.cjs');
    if (existsSync(bundledNpm)) {
      const child = spawn('node', [bundledNpm, ...args], {
        stdio: 'inherit',
        shell: false
      });

      child.on('error', (error) => {
        console.error('❌ Bundled NPM CLI execution failed:', error.message);
        tryOtherBuiltVersions();
      });

      child.on('exit', (code) => {
        process.exit(code || 0);
      });

      return;
    }

    // Priority 2: Try other built versions
    tryOtherBuiltVersions();

  } catch (error) {
    console.error('❌ Unexpected error:', error.message);
    showErrorHelp();
    process.exit(1);
  }
}

/**
 * Try other built versions (simple CLI, then enhanced main)
 */
async function tryOtherBuiltVersions() {
  try {
    // Try built simple CLI (stable fallback)
    const builtSimple = join(ROOT_DIR, 'dist', 'cli', 'simple-cli.js');
    if (existsSync(builtSimple)) {
      const child = spawn('node', [builtSimple, ...args], {
        stdio: 'inherit',
        shell: false
      });

      child.on('error', (error) => {
        console.error('❌ Built simple CLI execution failed:', error.message);
        tryAdvancedOrFallbacks();
      });

      child.on('exit', (code) => {
        process.exit(code || 0);
      });

      return;
    }

    // Try advanced version
    tryAdvancedOrFallbacks();

  } catch (error) {
    console.error('❌ Other built versions failed:', error.message);
    tryAdvancedOrFallbacks();
  }
}

/**
 * Try advanced version or source fallbacks
 */
async function tryAdvancedOrFallbacks() {
  try {
    // Try built ESM main entry (enhanced version with debug logging)
    const builtMain = join(ROOT_DIR, 'dist', 'cli', 'main.js');
    if (existsSync(builtMain)) {
      const child = spawn('node', [builtMain, ...args], {
        stdio: 'inherit',
        shell: false
      });

      child.on('error', (error) => {
        console.error('❌ Built main execution failed:', error.message);
        trySourceFallbacks();
      });

      child.on('exit', (code) => {
        process.exit(code || 0);
      });

      return;
    }

    // Try source fallbacks
    trySourceFallbacks();

  } catch (error) {
    console.error('❌ Advanced execution failed:', error.message);
    trySourceFallbacks();
  }
}

/**
 * Source fallback execution methods
 */
async function trySourceFallbacks() {
  try {
    // Fallback 1: Source TypeScript with tsx
    const tsMain = join(ROOT_DIR, 'src', 'cli', 'main.ts');
    if (existsSync(tsMain)) {
      const child = spawn('tsx', [tsMain, ...args], {
        stdio: 'inherit',
        shell: false
      });

      child.on('error', (error) => {
        console.error('❌ tsx execution failed:', error.message);

        // Try npx tsx as last resort
        const npxChild = spawn('npx', ['tsx', tsMain, ...args], {
          stdio: 'inherit',
          shell: false
        });

        npxChild.on('error', (npxError) => {
          console.error('❌ npx tsx also failed:', npxError.message);
          tryJavaScriptFallback();
        });

        npxChild.on('exit', (code) => {
          process.exit(code || 0);
        });
      });

      child.on('exit', (code) => {
        process.exit(code || 0);
      });

      return;
    }

    // Try JavaScript fallback
    tryJavaScriptFallback();

  } catch (error) {
    console.error('❌ Source fallback execution failed:', error.message);
    tryJavaScriptFallback();
  }
}

/**
 * Final JavaScript fallback
 */
async function tryJavaScriptFallback() {
  try {
    // Fallback 2: Source JavaScript simple CLI
    const jsSimple = join(ROOT_DIR, 'src', 'cli', 'simple-cli.js');
    if (existsSync(jsSimple)) {
      const child = spawn('node', [jsSimple, ...args], {
        stdio: 'inherit',
        shell: false
      });

      child.on('error', (error) => {
        console.error('❌ Source simple CLI execution failed:', error.message);
        showErrorHelp();
        process.exit(1);
      });

      child.on('exit', (code) => {
        process.exit(code || 0);
      });

      return;
    }

    // No runtime found
    showErrorHelp();
    process.exit(1);

  } catch (error) {
    console.error('❌ JavaScript fallback failed:', error.message);
    showErrorHelp();
    process.exit(1);
  }
}

/**
 * Show comprehensive error help
 */
async function showErrorHelp() {
  const version = await getVersion().catch(() => '${version}');

  console.log(\`🧠 Claude-Flow v\${version} - Advanced AI Agent Orchestration System\`);
  console.log('');
  console.log('⚠️  Execution Error: No compatible runtime or built files found.');
  console.log('');
  console.log('🔧 Possible Solutions:');
  console.log('  1. Build the project: npm run build');
  console.log('  2. Install tsx globally: npm install -g tsx');
  console.log('  3. Use development mode: npm run dev');
  console.log('  4. Use binary directly: ./bin/claude-flow');
  console.log('');
  console.log('📂 Expected files (in priority order):');
  console.log('  - dist/cli/main-npm.cjs (bundled enhanced version) ⭐');
  console.log('  - dist/cli/simple-cli.js (built stable fallback)');
  console.log('  - dist/cli/main.js (built enhanced version)');
  console.log('  - src/cli/main.ts (source with tsx)');
  console.log('  - src/cli/simple-cli.js (source fallback)');
  console.log('');
  console.log('📚 Documentation: https://github.com/ruvnet/claude-code-flow');
  console.log('🐛 Issues: https://github.com/ruvnet/claude-code-flow/issues');
}

// Execute main function
main();`;

// Write the bin file
const binPath = path.join(__dirname, '../bin/claude-flow.js');
fs.writeFileSync(binPath, binTemplate);

// Make it executable
try {
  fs.chmodSync(binPath, '755');
} catch (error) {
  console.warn('Warning: Could not make bin/claude-flow.js executable:', error.message);
}

console.log(`✅ Generated bin/claude-flow.js with version ${version}`);
console.log(`📁 Path: ${binPath}`);
console.log(`🔧 Executable: ${fs.statSync(binPath).mode & parseInt('111', 8) ? 'Yes' : 'No'}`);
