{
	"command_syntax_reference": {
		"metadata": {
			"generated_at": "2025-07-13T06:12:52.000Z",
			"cli_version": "1.0.71",
			"total_commands": 47,
			"categories": [
				"orchestration",
				"agents",
				"tasks",
				"memory",
				"configuration",
				"monitoring",
				"hooks",
				"utilities"
			]
		},
		"global_syntax": {
			"base_command": "claude-flow",
			"pattern": "claude-flow [global-options] <command> [command-options] [arguments]",
			"global_options": {
				"-c, --config <path>": {
					"description": "Path to configuration file",
					"default": "./claude-flow.config.json",
					"type": "string"
				},
				"-v, --verbose": {
					"description": "Enable verbose logging",
					"type": "boolean"
				},
				"-q, --quiet": {
					"description": "Suppress non-essential output",
					"type": "boolean"
				},
				"--log-level <level>": {
					"description": "Set log level (debug, info, warn, error)",
					"type": "string",
					"default": "info",
					"values": ["debug", "info", "warn", "error"]
				},
				"--no-color": {
					"description": "Disable colored output",
					"type": "boolean"
				},
				"--json": {
					"description": "Output in JSON format where applicable",
					"type": "boolean"
				},
				"--profile <profile>": {
					"description": "Use named configuration profile",
					"type": "string"
				}
			}
		},
		"commands": {
			"start": {
				"syntax": "claude-flow start [options]",
				"description": "Start Claude-Flow processes and services",
				"options": {},
				"examples": ["claude-flow start", "claude-flow start --verbose"]
			},
			"agent": {
				"syntax": "claude-flow agent <subcommand> [options] [arguments]",
				"description": "Comprehensive Agent management commands",
				"subcommands": {
					"create": {
						"syntax": "claude-flow agent create [options]",
						"options": {
							"-n, --name <name>": "Agent name",
							"-t, --type <type>": "Agent type",
							"-c, --capabilities <caps>": "Agent capabilities",
							"-p, --profile <profile>": "Agent profile",
							"--template <template>": "Template to use"
						},
						"examples": ["claude-flow agent create -n MyAgent -t researcher"]
					},
					"list": {
						"syntax": "claude-flow agent list [options]",
						"options": {
							"-s, --status <status>": "Filter by status",
							"-t, --type <type>": "Filter by type",
							"--format <format>": "Output format"
						},
						"examples": [
							"claude-flow agent list",
							"claude-flow agent list --status active"
						]
					},
					"show": {
						"syntax": "claude-flow agent show <agent-id>",
						"examples": ["claude-flow agent show agent-123"]
					},
					"start": {
						"syntax": "claude-flow agent start <agent-id>",
						"examples": ["claude-flow agent start agent-123"]
					},
					"stop": {
						"syntax": "claude-flow agent stop <agent-id>",
						"examples": ["claude-flow agent stop agent-123"]
					},
					"delete": {
						"syntax": "claude-flow agent delete <agent-id>",
						"examples": ["claude-flow agent delete agent-123"]
					}
				}
			},
			"task": {
				"syntax": "claude-flow task <subcommand> [options] [arguments]",
				"description": "Manage tasks",
				"subcommands": {
					"create": {
						"syntax": "claude-flow task create <type> <description> [options]",
						"options": {
							"-p, --priority <priority>": "Task priority (default: 0)",
							"-d, --dependencies <deps>": "Comma-separated dependency task IDs",
							"-i, --input <input>": "Task input as JSON",
							"-a, --assign <agent>": "Assign to specific agent"
						},
						"examples": [
							"claude-flow task create analysis 'Analyze user data' -p 1",
							"claude-flow task create code 'Build API' -a agent-123"
						]
					},
					"list": {
						"syntax": "claude-flow task list [options]",
						"options": {
							"-s, --status <status>": "Filter by status",
							"-a, --agent <agent>": "Filter by assigned agent"
						},
						"examples": [
							"claude-flow task list",
							"claude-flow task list --status pending"
						]
					},
					"status": {
						"syntax": "claude-flow task status <task-id>",
						"examples": ["claude-flow task status task-456"]
					},
					"cancel": {
						"syntax": "claude-flow task cancel <task-id>",
						"examples": ["claude-flow task cancel task-456"]
					}
				}
			},
			"memory": {
				"syntax": "claude-flow memory <subcommand> [options] [arguments]",
				"description": "Memory management commands",
				"subcommands": {
					"store": {
						"syntax": "claude-flow memory store <key> <value> [options]",
						"options": {
							"-n, --namespace <namespace>": "Memory namespace (default: default)"
						},
						"examples": [
							"claude-flow memory store user_config '{\"theme\":\"dark\"}'",
							"claude-flow memory store project_data 'data' -n project1"
						]
					},
					"get": {
						"syntax": "claude-flow memory get <key> [options]",
						"options": {
							"-n, --namespace <namespace>": "Memory namespace"
						},
						"examples": [
							"claude-flow memory get user_config",
							"claude-flow memory get project_data -n project1"
						]
					},
					"list": {
						"syntax": "claude-flow memory list [options]",
						"options": {
							"-n, --namespace <namespace>": "Memory namespace",
							"--format <format>": "Output format"
						},
						"examples": [
							"claude-flow memory list",
							"claude-flow memory list -n project1"
						]
					},
					"delete": {
						"syntax": "claude-flow memory delete <key> [options]",
						"options": {
							"-n, --namespace <namespace>": "Memory namespace"
						},
						"examples": ["claude-flow memory delete old_config"]
					},
					"clear": {
						"syntax": "claude-flow memory clear [options]",
						"options": {
							"-n, --namespace <namespace>": "Memory namespace",
							"--confirm": "Skip confirmation prompt"
						},
						"examples": ["claude-flow memory clear --confirm"]
					}
				}
			},
			"swarm": {
				"syntax": "claude-flow swarm <objective> [options]",
				"description": "Self-orchestrating agent swarms",
				"options": {
					"--dry-run": "Show configuration without executing",
					"--strategy <type>": "Strategy: auto, research, development, analysis",
					"--max-agents <n>": "Maximum number of agents (default: 5)",
					"--timeout <minutes>": "Timeout in minutes (default: 60)",
					"--research": "Enable research capabilities",
					"--parallel": "Enable parallel execution",
					"--review": "Enable peer review between agents",
					"--monitor": "Enable real-time monitoring",
					"--ui": "Use blessed terminal UI",
					"--background": "Run swarm in background mode",
					"--distributed": "Enable distributed coordination",
					"--memory-namespace <namespace>": "Memory namespace (default: swarm)",
					"--persistence": "Enable task persistence (default: true)"
				},
				"examples": [
					"claude-flow swarm 'Build a REST API'",
					"claude-flow swarm 'Research cloud architecture' --strategy research --max-agents 8",
					"claude-flow swarm 'Analyze codebase' --parallel --monitor"
				]
			},
			"hive": {
				"syntax": "claude-flow hive <objective> [options]",
				"description": "Multi-agent swarm coordination with consensus mechanisms",
				"options": {
					"--topology <type>": "Topology: mesh, hierarchical, ring, star",
					"--consensus <type>": "Consensus: quorum, unanimous, weighted, leader",
					"--max-agents <n>": "Maximum number of agents (default: 8)",
					"--timeout <minutes>": "Timeout in minutes (default: 60)",
					"--monitor": "Enable real-time monitoring",
					"--background": "Run in background mode",
					"--memory-namespace <namespace>": "Memory namespace",
					"--quality-threshold <threshold>": "Quality threshold",
					"--sparc": "Enable SPARC modes"
				},
				"examples": [
					"claude-flow hive 'Design microservices architecture'",
					"claude-flow hive 'Code review process' --topology mesh --consensus quorum",
					"claude-flow hive 'System optimization' --max-agents 12 --sparc"
				]
			},
			"sparc": {
				"syntax": "claude-flow sparc <subcommand|mode> [task] [options]",
				"description": "SPARC development mode commands",
				"subcommands": {
					"modes": {
						"syntax": "claude-flow sparc modes",
						"description": "List available SPARC modes",
						"examples": ["claude-flow sparc modes"]
					},
					"info": {
						"syntax": "claude-flow sparc info <mode>",
						"description": "Show information about a specific mode",
						"examples": ["claude-flow sparc info coder"]
					},
					"run": {
						"syntax": "claude-flow sparc run <mode> <task> [options]",
						"description": "Run a SPARC mode",
						"options": {
							"--non-interactive, -n": "Non-interactive mode",
							"--dry-run, -d": "Dry run mode",
							"--verbose, -v": "Verbose output",
							"--no-permissions": "Disable permissions",
							"--enable-permissions": "Enable permissions",
							"--namespace <value>": "Namespace",
							"--config <value>": "Config file",
							"--interactive, -i": "Interactive mode"
						},
						"examples": [
							"claude-flow sparc run coder 'Build authentication system'",
							"claude-flow sparc run architect 'Design database schema' --verbose",
							"claude-flow sparc orchestrator 'Complex multi-step task'"
						]
					},
					"tdd": {
						"syntax": "claude-flow sparc tdd [task]",
						"description": "Test-driven development mode",
						"examples": ["claude-flow sparc tdd 'Build user service'"]
					}
				},
				"available_modes": [
					"orchestrator",
					"swarm-coordinator",
					"workflow-manager",
					"batch-executor",
					"coder",
					"architect",
					"reviewer",
					"tdd",
					"researcher",
					"analyzer",
					"optimizer",
					"designer",
					"innovator",
					"documenter",
					"debugger",
					"tester",
					"memory-manager"
				]
			},
			"hive-mind": {
				"syntax": "claude-flow hive-mind <subcommand> [options]",
				"description": "Hive Mind collective intelligence swarm management",
				"subcommands": {
					"init": {
						"syntax": "claude-flow hive-mind init [options]",
						"description": "Initialize hive mind system"
					},
					"spawn": {
						"syntax": "claude-flow hive-mind spawn [options]",
						"description": "Spawn hive mind agents"
					},
					"status": {
						"syntax": "claude-flow hive-mind status",
						"description": "Show hive mind status"
					},
					"task": {
						"syntax": "claude-flow hive-mind task <action> [options]",
						"description": "Manage hive mind tasks"
					},
					"wizard": {
						"syntax": "claude-flow hive-mind wizard",
						"description": "Interactive wizard for hive mind setup"
					},
					"optimize-memory": {
						"syntax": "claude-flow hive-mind optimize-memory [options]",
						"description": "Optimize memory usage"
					}
				}
			},
			"hook": {
				"syntax": "claude-flow hook <hook-type> [options]",
				"description": "Hook system for automation and integration",
				"hook_types": {
					"pre-task": {
						"syntax": "claude-flow hook pre-task --description <desc> [options]",
						"options": {
							"--description <desc>": "Task description",
							"--auto-spawn-agents <bool>": "Auto-spawn agents"
						}
					},
					"post-task": {
						"syntax": "claude-flow hook post-task --task-id <id> [options]",
						"options": {
							"--task-id <id>": "Task ID",
							"--analyze-performance <bool>": "Analyze performance"
						}
					},
					"post-edit": {
						"syntax": "claude-flow hook post-edit --file <filepath> --memory-key <key>",
						"options": {
							"--file <filepath>": "File path",
							"--memory-key <key>": "Memory key"
						}
					},
					"session-end": {
						"syntax": "claude-flow hook session-end [options]",
						"options": {
							"--export-metrics <bool>": "Export metrics",
							"--generate-summary <bool>": "Generate summary"
						}
					},
					"notify": {
						"syntax": "claude-flow hook notify --message <msg> [options]",
						"options": {
							"--message <msg>": "Notification message",
							"--level <level>": "Notification level",
							"--telemetry <bool>": "Enable telemetry"
						}
					}
				},
				"examples": [
					"claude-flow hook pre-task --description 'Complete CLI mapping'",
					"claude-flow hook post-edit --file 'hierarchy.json' --memory-key 'cli/complete'",
					"claude-flow hook notify --message 'Task completed' --level 'success'"
				]
			},
			"config": {
				"syntax": "claude-flow config <subcommand> [arguments]",
				"description": "Configuration management",
				"subcommands": {
					"show": {
						"syntax": "claude-flow config show",
						"description": "Show current configuration"
					},
					"set": {
						"syntax": "claude-flow config set <key> <value>",
						"description": "Set configuration value"
					},
					"get": {
						"syntax": "claude-flow config get <key>",
						"description": "Get configuration value"
					},
					"reset": {
						"syntax": "claude-flow config reset",
						"description": "Reset configuration to defaults"
					}
				}
			},
			"status": {
				"syntax": "claude-flow status",
				"description": "Show system status"
			},
			"monitor": {
				"syntax": "claude-flow monitor [options]",
				"description": "Monitor system performance"
			},
			"session": {
				"syntax": "claude-flow session <subcommand> [options]",
				"description": "Session management"
			},
			"workflow": {
				"syntax": "claude-flow workflow <subcommand> [options]",
				"description": "Workflow management"
			},
			"mcp": {
				"syntax": "claude-flow mcp <subcommand> [options]",
				"description": "MCP (Model Context Protocol) integration"
			},
			"help": {
				"syntax": "claude-flow help [command]",
				"description": "Show help information",
				"examples": [
					"claude-flow help",
					"claude-flow help swarm",
					"claude-flow help agent create"
				]
			},
			"repl": {
				"syntax": "claude-flow repl [options]",
				"description": "Start interactive REPL mode",
				"options": {
					"--no-banner": "Skip welcome banner",
					"--history-file <path>": "Custom history file path"
				}
			},
			"version": {
				"syntax": "claude-flow version [options]",
				"description": "Show version information",
				"options": {
					"--short": "Show version number only"
				}
			},
			"completion": {
				"syntax": "claude-flow completion [shell] [options]",
				"description": "Generate shell completion scripts",
				"options": {
					"--install": "Install completion script automatically"
				},
				"supported_shells": ["bash", "zsh", "fish", "powershell"]
			}
		},
		"argument_patterns": {
			"<required>": "Required argument",
			"[optional]": "Optional argument",
			"<choice1|choice2>": "Choose one option",
			"<path>": "File or directory path",
			"<id>": "Identifier (UUID or name)",
			"<json>": "JSON formatted string",
			"<number>": "Numeric value",
			"<boolean>": "Boolean value (true/false)"
		},
		"option_patterns": {
			"-s, --short": "Short and long form options",
			"--flag": "Boolean flag",
			"--option <value>": "Option with required value",
			"--option [value]": "Option with optional value"
		}
	}
}
