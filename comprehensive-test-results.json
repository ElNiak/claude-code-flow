{
  "timestamp": "2025-07-21T13:30:35.596Z",
  "summary": {
    "totalTime": 22014,
    "categories": 8,
    "totalTests": 25,
    "passedTests": 25,
    "failedTests": 0,
    "successRate": "100.00",
    "totalDuration": 4398.335289999999,
    "averagePerformance": 201.2781393999995,
    "recommendations": 2,
    "criticalIssues": 0
  },
  "featureTests": {
    "Basic Commands": [
      {
        "name": "version",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js --version",
        "expectedExit": 0,
        "description": "Check CLI version",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [--version]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, --version]\n  Processing arg[0]: \"--version\"\n    Flag detected: \"version\", next arg: \"undefined\"\n    ‚úÖ Set boolean flag \"version\" = true\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {\n  \"version\": true\n}\n  args: []\nClaude-Flow v2.0.0-alpha.50",
        "stderr": "",
        "duration": 132.034583,
        "memoryDelta": {
          "heapUsed": -0.08907318115234375,
          "heapTotal": 0.75,
          "rss": 0.765625,
          "external": 0.00028896331787109375
        },
        "passed": true,
        "performance": {
          "duration": 132.034583,
          "memoryDelta": {
            "heapUsed": -0.08907318115234375,
            "heapTotal": 0.75,
            "rss": 0.765625,
            "external": 0.00028896331787109375
          }
        }
      },
      {
        "name": "help",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js --help",
        "expectedExit": 0,
        "description": "Display help message",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [--help]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, --help]\n  Processing arg[0]: \"--help\"\n    Flag detected: \"help\", next arg: \"undefined\"\n    ‚úÖ Set boolean flag \"help\" = true\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {\n  \"help\": true\n}\n  args: []\n\nüåä Claude-Flow v2.0.0-alpha.50 - Enterprise-Grade AI Agent Orchestration Platform\n\nüéØ ENTERPRISE FEATURES: Complete ruv-swarm integration with 27 MCP tools, neural networking, and production-ready infrastructure,\n\nUSAGE:\n  claude-flow <command> [options]\n\nüöÄ INSTALLATION & ENTERPRISE SETUP:\n  npx claude-flow@2.0.0 init --sparc  # Enterprise SPARC + ruv-swarm integration,\n\n  The --sparc flag creates:\n  ‚Ä¢ Complete ruv-swarm integration with 27 MCP tools\n  ‚Ä¢ Neural network processing with WASM optimization\n  ‚Ä¢ Multi-agent coordination (hierarchical, mesh, ring, star topologies)\n  ‚Ä¢ Cross-session memory and persistent learning\n  ‚Ä¢ GitHub workflow automation (6 specialized modes)\n  ‚Ä¢ Production-ready Docker infrastructure\n  ‚Ä¢ Enterprise security and compliance features\n\nüß† SWARM INTELLIGENCE COMMANDS (v2.0.0):\n  swarm \"objective\" [--strategy] [--mode] [--max-agents N] [--parallel] [--monitor]\n    --strategy: research, development, analysis, testing, optimization, maintenance\n    --mode: centralized, distributed, hierarchical, mesh, hybrid\n    --parallel: Enable parallel execution (improved performance)\n    --monitor: Real-time swarm monitoring and performance tracking\n\nüêô GITHUB WORKFLOW AUTOMATION (v2.0.0):\n  github gh-coordinator        # GitHub workflow orchestration and coordination,\n  github pr-manager           # Pull request management with multi-reviewer coordination,\n  github issue-tracker        # Issue management and project coordination,\n  github release-manager      # Release coordination and deployment pipelines,\n  github repo-architect       # Repository structure optimization,\n  github sync-coordinator     # Multi-package synchronization and version alignment\n\nüèóÔ∏è CORE ENTERPRISE COMMANDS:\n  init [--sparc]              # Initialize with enterprise environment + ruv-swarm,\n  start [--ui] [--swarm]      # Start orchestration with swarm intelligence,\n  spawn <type> [--name]       # Create AI agent with swarm coordination,\n  agent <subcommand>          # Advanced agent management with neural patterns,\n  sparc <subcommand>          # 17 SPARC modes with neural enhancement,\n  memory <subcommand>         # Cross-session persistent memory with neural learning,\n  status                      # Comprehensive system status with performance metrics\n\nü§ñ NEURAL AGENT TYPES (ruv-swarm Integration):\n  researcher     # Research with web access and data analysis,\n  coder          # Code development with neural patterns,\n  analyst        # Performance analysis and optimization,\n  architect      # System design with enterprise patterns,\n  tester         # Comprehensive testing with automation,\n  coordinator    # Multi-agent orchestration and workflow management,\n  reviewer       # Code review with security and quality checks,\n  optimizer      # Performance optimization and bottleneck analysis\n\nüéÆ ENTERPRISE QUICK START:\n  # Initialize enterprise environment,\n  npx claude-flow@2.0.0 init --sparc\n\n  # Start enterprise orchestration with swarm intelligence\n  ./claude-flow start --ui --swarm\n\n  # Deploy intelligent multi-agent development workflow\n  ./claude-flow swarm \"build enterprise API\" --strategy development --parallel --monitor\n\n  # GitHub workflow automation\n  ./claude-flow github pr-manager \"coordinate release with automated testing\"\n\n  # Neural memory management\n  ./claude-flow memory store \"architecture\" \"microservices with API gateway pattern\"\n\n  # Real-time system monitoring\n  ./claude-flow status --verbose\n\nüè¢ ENTERPRISE COMMAND CATEGORIES:\n  Core Intelligence:    swarm, agent, sparc, memory, neural,\n  GitHub Automation:    github (6 specialized modes),\n  Development:          init, start, status, config, workflow,\n  Infrastructure:       mcp, terminal, session, docker,\n  Enterprise:           project, deploy, cloud, security, analytics, audit\n\nüß† NEURAL NETWORK FEATURES (v2.0.0):\n  ‚Ä¢ WASM-powered cognitive patterns with SIMD optimization\n  ‚Ä¢ 27 MCP tools for comprehensive workflow automation\n  ‚Ä¢ Cross-session learning and adaptation\n  ‚Ä¢ Real-time performance monitoring with optimized response times\n  ‚Ä¢ Token usage optimization through intelligent coordination\n  ‚Ä¢ Self-healing workflows with automatic error recovery\n\nüìä ENTERPRISE FEATURES:\n  ‚Ä¢ Enhanced problem-solving through coordinated intelligence\n  ‚Ä¢ Performance improvements with parallel execution\n  ‚Ä¢ 60% Docker build performance improvement\n  ‚Ä¢ 100% test success rate with comprehensive validation\n  ‚Ä¢ Sub-10ms MCP response times\n\nüîó INTEGRATION & COMPATIBILITY:\n  ‚Ä¢ Node.js 20+ optimization for enterprise environments\n  ‚Ä¢ Complete Claude Code integration with enhanced capabilities\n  ‚Ä¢ Multi-platform support (Windows, macOS, Linux)\n  ‚Ä¢ Enterprise security with access control and audit logging\n  ‚Ä¢ Cross-package synchronization and dependency management,\n\nGET DETAILED HELP:\n  claude-flow help <command>           # Command-specific enterprise documentation,\n  claude-flow <command> --help         # Alternative help syntax,\n\n  Examples:\n    claude-flow help swarm             # Swarm intelligence coordination,\n    claude-flow help github            # GitHub workflow automation,\n    claude-flow help neural            # Neural network processing,\n    claude-flow help enterprise        # Enterprise features and compliance,\n\nCOMMON OPTIONS:\n  --verbose, -v                        Enable detailed output with performance metrics\n  --help                               Show command help with enterprise features\n  --config <path>                      Use custom enterprise configuration\n  --parallel                           Enable parallel execution (default for swarms)\n  --monitor                            Real-time monitoring and performance tracking\n\nüìö Documentation: https://github.com/ruvnet/claude-code-flow\nüêù ruv-swarm: https://github.com/ruvnet/ruv-FANN/tree/main/ruv-swarm\n\nüöÄ Enterprise-Grade AI Agent Orchestration - Built with ‚ù§Ô∏è by rUv for the Claude community\n\n\nRegistered Commands:\n  init         Initialize a new claude-flow project\n  agent        Manage and run AI agents\n  swarm        Orchestrate multiple agents\n  mcp          Model Context Protocol integration\n  hooks        Execute coordination hooks\n  status       Show system status\n  help         Show help information\n\nUse \"claude-flow help <command>\" for detailed usage information",
        "stderr": "",
        "duration": 135.34920799999998,
        "memoryDelta": {
          "heapUsed": 0.140472412109375,
          "heapTotal": 0,
          "rss": 0.03125,
          "external": 0.00649261474609375
        },
        "passed": true,
        "performance": {
          "duration": 135.34920799999998,
          "memoryDelta": {
            "heapUsed": 0.140472412109375,
            "heapTotal": 0,
            "rss": 0.03125,
            "external": 0.00649261474609375
          }
        }
      },
      {
        "name": "status",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js status",
        "expectedExit": 0,
        "description": "Show system status",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [status]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, status]\n  Processing arg[0]: \"status\"\n    ‚úÖ Added to args: \"status\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [status]\n‚úÖ Claude-Flow System Status:\nüü° Not Running (orchestrator not started)\nü§ñ Agents: 0 active\nüìã Tasks: 0 in queue\nüíæ Memory: Ready (0 entries)\nüñ•Ô∏è  Terminal Pool: Ready\nüåê MCP Server: Stopped\n\nüí° Quick Actions:\n   Run \"claude-flow start\" to begin orchestration\n   Run \"claude-flow agent spawn researcher\" to create an agent\n   Run \"claude-flow memory store key value\" to test memory",
        "stderr": "",
        "duration": 151.332083,
        "memoryDelta": {
          "heapUsed": 0.11200714111328125,
          "heapTotal": 0.25,
          "rss": 0.546875,
          "external": 0.0007152557373046875
        },
        "passed": true,
        "performance": {
          "duration": 151.332083,
          "memoryDelta": {
            "heapUsed": 0.11200714111328125,
            "heapTotal": 0.25,
            "rss": 0.546875,
            "external": 0.0007152557373046875
          }
        }
      },
      {
        "name": "config_get",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js config get",
        "args": [
          "get"
        ],
        "expectedExit": 0,
        "description": "Get configuration",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [get]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, config, get]\n  Processing arg[0]: \"get\"\n    ‚úÖ Added to args: \"get\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [get]\n‚ùå Usage: config get <key>\nExamples:\n  claude-flow config get terminal.poolSize\n  claude-flow config get orchestrator.maxConcurrentTasks",
        "stderr": "",
        "duration": 130.9436659999999,
        "memoryDelta": {
          "heapUsed": 0.1021270751953125,
          "heapTotal": 0,
          "rss": 0.09375,
          "external": 0.0004596710205078125
        },
        "passed": true,
        "performance": {
          "duration": 130.9436659999999,
          "memoryDelta": {
            "heapUsed": 0.1021270751953125,
            "heapTotal": 0,
            "rss": 0.09375,
            "external": 0.0004596710205078125
          }
        }
      }
    ],
    "Agent Management": [
      {
        "name": "agent_list",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js agent list",
        "args": [
          "list"
        ],
        "expectedExit": 0,
        "description": "List available agents",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [list]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, agent, list]\n  Processing arg[0]: \"list\"\n    ‚úÖ Added to args: \"list\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [list]\n‚úÖ Active Agents:\nüìã No agents currently active",
        "stderr": "",
        "duration": 159.457042,
        "memoryDelta": {
          "heapUsed": 0.12708282470703125,
          "heapTotal": 0,
          "rss": 0.328125,
          "external": 0.00038051605224609375
        },
        "passed": true,
        "performance": {
          "duration": 159.457042,
          "memoryDelta": {
            "heapUsed": 0.12708282470703125,
            "heapTotal": 0,
            "rss": 0.328125,
            "external": 0.00038051605224609375
          }
        }
      },
      {
        "name": "agent_spawn_test",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js agent spawn researcher --dry-run",
        "args": [
          "spawn",
          "researcher",
          "--dry-run"
        ],
        "expectedExit": 0,
        "description": "Test agent spawning (dry run)",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [spawn, researcher, --dry-run]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, agent, spawn, researcher, --dry-run]\n  Processing arg[0]: \"spawn\"\n    ‚úÖ Added to args: \"spawn\"\n  Processing arg[1]: \"researcher\"\n    ‚úÖ Added to args: \"researcher\"\n  Processing arg[2]: \"--dry-run\"\n    Flag detected: \"dry-run\", next arg: \"undefined\"\n    ‚úÖ Set boolean flag \"dry-run\" = true\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {\n  \"dry-run\": true\n}\n  args: [spawn, researcher]\n‚úÖ Agent spawn functionality not fully implemented yet\nü§ñ Would spawn agent with args: [ 'researcher' ]",
        "stderr": "",
        "duration": 182.13183299999992,
        "memoryDelta": {
          "heapUsed": 0.0760955810546875,
          "heapTotal": 0,
          "rss": 0.265625,
          "external": 0.0006999969482421875
        },
        "passed": true,
        "performance": {
          "duration": 182.13183299999992,
          "memoryDelta": {
            "heapUsed": 0.0760955810546875,
            "heapTotal": 0,
            "rss": 0.265625,
            "external": 0.0006999969482421875
          }
        }
      },
      {
        "name": "agent_status",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js agent status",
        "args": [
          "status"
        ],
        "expectedExit": 0,
        "description": "Check agent status",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [status]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, agent, status]\n  Processing arg[0]: \"status\"\n    ‚úÖ Added to args: \"status\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [status]\n\nü§ñ Agent Management Commands:\n\nCore Commands:\n  spawn <type>         Create a new agent with specified type\n  list                 Display all active agents\n  info <id>           Show detailed information about an agent\n  terminate <id>      Safely terminate an agent\n  health              Monitor agent health and performance\n\nAdvanced Commands:\n  hierarchy <action>   Manage agent hierarchies\n  network <action>     Configure agent networks\n  ecosystem <action>   Manage agent ecosystems\n  provision <id>      Provision resources for an agent\n\nExamples:\n  agent spawn researcher --name \"DataBot\"\n  agent list --unhealthy\n  agent info agent-123\n  agent terminate agent-123 --force\n  agent health\n  agent hierarchy create enterprise\n  agent network create mesh\n  agent ecosystem init\n\nUse --help with any command for detailed options.",
        "stderr": "",
        "duration": 182.0737079999999,
        "memoryDelta": {
          "heapUsed": 0.07328033447265625,
          "heapTotal": 0,
          "rss": 0.1875,
          "external": 0.0011425018310546875
        },
        "passed": true,
        "performance": {
          "duration": 182.0737079999999,
          "memoryDelta": {
            "heapUsed": 0.07328033447265625,
            "heapTotal": 0,
            "rss": 0.1875,
            "external": 0.0011425018310546875
          }
        }
      }
    ],
    "Swarm Coordination": [
      {
        "name": "swarm_status",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js swarm status --test-mode",
        "args": [
          "status",
          "--test-mode"
        ],
        "expectedExit": 0,
        "description": "Check swarm status",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [status, --test-mode]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, swarm, status, --test-mode]\n  Processing arg[0]: \"status\"\n    ‚úÖ Added to args: \"status\"\n  Processing arg[1]: \"--test-mode\"\n    Flag detected: \"test-mode\", next arg: \"undefined\"\n    ‚úÖ Set boolean flag \"test-mode\" = true\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {\n  \"test-mode\": true\n}\n  args: [status]\nüß™ Test mode: Simulating swarm execution\nüêù Launching Claude Flow Swarm System...\nüìã Objective: status\nüéØ Strategy: auto\nüèóÔ∏è  Mode: centralized\nü§ñ Max Agents: 5\n‚úì Swarm initialized successfully (test mode)\nüß™ Test mode complete - no external processes launched",
        "stderr": "",
        "duration": 199.0756249999995,
        "memoryDelta": {
          "heapUsed": 0.33718109130859375,
          "heapTotal": 0,
          "rss": 0.171875,
          "external": 0.0007791519165039062
        },
        "passed": true,
        "performance": {
          "duration": 199.0756249999995,
          "memoryDelta": {
            "heapUsed": 0.33718109130859375,
            "heapTotal": 0,
            "rss": 0.171875,
            "external": 0.0007791519165039062
          }
        }
      },
      {
        "name": "swarm_init_test",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js swarm init --dry-run --test-mode",
        "args": [
          "init",
          "--dry-run",
          "--test-mode"
        ],
        "expectedExit": 0,
        "description": "Test swarm initialization (dry run)",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [init, --dry-run, --test-mode]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, swarm, init, --dry-run, --test-mode]\n  Processing arg[0]: \"init\"\n    ‚úÖ Added to args: \"init\"\n  Processing arg[1]: \"--dry-run\"\n    Flag detected: \"dry-run\", next arg: \"--test-mode\"\n    ‚úÖ Set boolean flag \"dry-run\" = true\n  Processing arg[2]: \"--test-mode\"\n    Flag detected: \"test-mode\", next arg: \"undefined\"\n    ‚úÖ Set boolean flag \"test-mode\" = true\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {\n  \"dry-run\": true,\n  \"test-mode\": true\n}\n  args: [init]\nüß™ Test mode: Simulating swarm execution\nüêù Launching Claude Flow Swarm System...\nüìã Objective: init\nüéØ Strategy: auto\nüèóÔ∏è  Mode: centralized\nü§ñ Max Agents: 5\n‚úì Swarm initialized successfully (test mode)\nüß™ Test mode complete - no external processes launched",
        "stderr": "",
        "duration": 171.43183399999998,
        "memoryDelta": {
          "heapUsed": -0.530609130859375,
          "heapTotal": 0.25,
          "rss": 0.6875,
          "external": -0.010529518127441406
        },
        "passed": true,
        "performance": {
          "duration": 171.43183399999998,
          "memoryDelta": {
            "heapUsed": -0.530609130859375,
            "heapTotal": 0.25,
            "rss": 0.6875,
            "external": -0.010529518127441406
          }
        }
      },
      {
        "name": "swarm_list",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js swarm list --test-mode",
        "args": [
          "list",
          "--test-mode"
        ],
        "expectedExit": 0,
        "description": "List active swarms",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [list, --test-mode]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, swarm, list, --test-mode]\n  Processing arg[0]: \"list\"\n    ‚úÖ Added to args: \"list\"\n  Processing arg[1]: \"--test-mode\"\n    Flag detected: \"test-mode\", next arg: \"undefined\"\n    ‚úÖ Set boolean flag \"test-mode\" = true\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {\n  \"test-mode\": true\n}\n  args: [list]\nüß™ Test mode: Simulating swarm execution\nüêù Launching Claude Flow Swarm System...\nüìã Objective: list\nüéØ Strategy: auto\nüèóÔ∏è  Mode: centralized\nü§ñ Max Agents: 5\n‚úì Swarm initialized successfully (test mode)\nüß™ Test mode complete - no external processes launched",
        "stderr": "",
        "duration": 165.33037499999955,
        "memoryDelta": {
          "heapUsed": 0.0787506103515625,
          "heapTotal": 0,
          "rss": 0.09375,
          "external": 0.0007677078247070312
        },
        "passed": true,
        "performance": {
          "duration": 165.33037499999955,
          "memoryDelta": {
            "heapUsed": 0.0787506103515625,
            "heapTotal": 0,
            "rss": 0.09375,
            "external": 0.0007677078247070312
          }
        }
      }
    ],
    "Memory Management": [
      {
        "name": "memory_stats",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js memory stats",
        "args": [
          "stats"
        ],
        "expectedExit": 0,
        "description": "Memory usage statistics",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [stats]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, memory, stats]\n  Processing arg[0]: \"stats\"\n    ‚úÖ Added to args: \"stats\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [stats]\n‚úÖ Memory Bank Statistics:\n   Total Entries: 3\n   Namespaces: 1\n   Size: 0.49 KB\n\nüìÅ Namespace Breakdown:\n   default: 3 entries",
        "stderr": "",
        "duration": 186.72220800000014,
        "memoryDelta": {
          "heapUsed": 0.07586669921875,
          "heapTotal": 0,
          "rss": 0.046875,
          "external": 0.00046253204345703125
        },
        "passed": true,
        "performance": {
          "duration": 186.72220800000014,
          "memoryDelta": {
            "heapUsed": 0.07586669921875,
            "heapTotal": 0,
            "rss": 0.046875,
            "external": 0.00046253204345703125
          }
        }
      },
      {
        "name": "memory_clear_test",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js memory clear --dry-run",
        "args": [
          "clear",
          "--dry-run"
        ],
        "expectedExit": 0,
        "description": "Test memory clearing (dry run)",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [clear, --dry-run]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, memory, clear, --dry-run]\n  Processing arg[0]: \"clear\"\n    ‚úÖ Added to args: \"clear\"\n  Processing arg[1]: \"--dry-run\"\n    Flag detected: \"dry-run\", next arg: \"undefined\"\n    ‚úÖ Set boolean flag \"dry-run\" = true\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {\n  \"dry-run\": true\n}\n  args: [clear]\n‚ùå Usage: memory clear --namespace <namespace>\n‚ö†Ô∏è  This will clear all entries in the specified namespace",
        "stderr": "",
        "duration": 240.2803330000006,
        "memoryDelta": {
          "heapUsed": 0.07080841064453125,
          "heapTotal": 0,
          "rss": 0.25,
          "external": 0.0006036758422851562
        },
        "passed": true,
        "performance": {
          "duration": 240.2803330000006,
          "memoryDelta": {
            "heapUsed": 0.07080841064453125,
            "heapTotal": 0,
            "rss": 0.25,
            "external": 0.0006036758422851562
          }
        }
      },
      {
        "name": "memory_list",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js memory list",
        "args": [
          "list"
        ],
        "expectedExit": 0,
        "description": "List memory entries",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [list]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, memory, list]\n  Processing arg[0]: \"list\"\n    ‚úÖ Added to args: \"list\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [list]\n‚úÖ Available namespaces:\n  default (3 entries)",
        "stderr": "",
        "duration": 198.36454199999935,
        "memoryDelta": {
          "heapUsed": -0.603729248046875,
          "heapTotal": -1.5,
          "rss": 1.546875,
          "external": -0.0020751953125
        },
        "passed": true,
        "performance": {
          "duration": 198.36454199999935,
          "memoryDelta": {
            "heapUsed": -0.603729248046875,
            "heapTotal": -1.5,
            "rss": 1.546875,
            "external": -0.0020751953125
          }
        }
      }
    ],
    "Task Management": [
      {
        "name": "task_list",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js task list",
        "args": [
          "list"
        ],
        "expectedExit": 0,
        "description": "List active tasks",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [list]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, task, list]\n  Processing arg[0]: \"list\"\n    ‚úÖ Added to args: \"list\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [list]\n‚úÖ Task queue:\nüìã No active tasks (orchestrator not running)\n\nTask statuses: queued, running, completed, failed, cancelled",
        "stderr": "",
        "duration": 195.71641699999964,
        "memoryDelta": {
          "heapUsed": 0.081817626953125,
          "heapTotal": 0,
          "rss": 0.0625,
          "external": 0.00045108795166015625
        },
        "passed": true,
        "performance": {
          "duration": 195.71641699999964,
          "memoryDelta": {
            "heapUsed": 0.081817626953125,
            "heapTotal": 0,
            "rss": 0.0625,
            "external": 0.00045108795166015625
          }
        }
      },
      {
        "name": "task_status",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js task status",
        "args": [
          "status"
        ],
        "expectedExit": 0,
        "description": "Task status overview",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [status]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, task, status]\n  Processing arg[0]: \"status\"\n    ‚úÖ Added to args: \"status\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [status]\n‚ùå Usage: task status <task-id>",
        "stderr": "",
        "duration": 222.25170799999978,
        "memoryDelta": {
          "heapUsed": 0.0670166015625,
          "heapTotal": 0,
          "rss": -0.59375,
          "external": 0.0003719329833984375
        },
        "passed": true,
        "performance": {
          "duration": 222.25170799999978,
          "memoryDelta": {
            "heapUsed": 0.0670166015625,
            "heapTotal": 0,
            "rss": -0.59375,
            "external": 0.0003719329833984375
          }
        }
      },
      {
        "name": "task_create_test",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js task create --dry-run test-task",
        "args": [
          "create",
          "--dry-run",
          "test-task"
        ],
        "expectedExit": 0,
        "description": "Test task creation (dry run)",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [create, --dry-run, test-task]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, task, create, --dry-run, test-task]\n  Processing arg[0]: \"create\"\n    ‚úÖ Added to args: \"create\"\n  Processing arg[1]: \"--dry-run\"\n    Flag detected: \"dry-run\", next arg: \"test-task\"\n    ‚úÖ Set flag \"dry-run\" = \"test-task\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {\n  \"dry-run\": \"test-task\"\n}\n  args: [create]\n‚ùå Usage: task create <type> \"<description>\"\nTypes: research, code, analysis, coordination, general",
        "stderr": "",
        "duration": 145.18983300000036,
        "memoryDelta": {
          "heapUsed": 0.07550048828125,
          "heapTotal": 0,
          "rss": 0.578125,
          "external": 0.0006237030029296875
        },
        "passed": true,
        "performance": {
          "duration": 145.18983300000036,
          "memoryDelta": {
            "heapUsed": 0.07550048828125,
            "heapTotal": 0,
            "rss": 0.578125,
            "external": 0.0006237030029296875
          }
        }
      }
    ],
    "Configuration": [
      {
        "name": "config_list",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js config list",
        "args": [
          "list"
        ],
        "expectedExit": 0,
        "description": "List configuration options",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [list]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, config, list]\n  Processing arg[0]: \"list\"\n    ‚úÖ Added to args: \"list\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [list]\nConfiguration commands:\n  init [--force]                   Create default configuration\n  show [--format json]             Display current configuration\n  get <key>                        Get configuration value\n  set <key> <value>                Set configuration value\n  validate                         Validate configuration\n  reset --force                    Reset to defaults\n\nConfiguration Keys:\n  terminal.poolSize                Terminal pool size\n  terminal.recycleAfter            Commands before recycle\n  orchestrator.maxConcurrentTasks  Max parallel tasks\n  orchestrator.taskTimeout         Task timeout in ms\n  memory.backend                   Memory storage backend\n  memory.path                      Memory database path\n  agents.maxAgents                 Maximum number of agents\n\nExamples:\n  claude-flow config init\n  claude-flow config set terminal.poolSize 15\n  claude-flow config get orchestrator.maxConcurrentTasks\n  claude-flow config validate",
        "stderr": "",
        "duration": 135.24683299999924,
        "memoryDelta": {
          "heapUsed": 0.27191925048828125,
          "heapTotal": 0,
          "rss": 0.390625,
          "external": 0.0012559890747070312
        },
        "passed": true,
        "performance": {
          "duration": 135.24683299999924,
          "memoryDelta": {
            "heapUsed": 0.27191925048828125,
            "heapTotal": 0,
            "rss": 0.390625,
            "external": 0.0012559890747070312
          }
        }
      },
      {
        "name": "config_validate",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js config validate",
        "args": [
          "validate"
        ],
        "expectedExit": 0,
        "description": "Validate configuration",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [validate]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, config, validate]\n  Processing arg[0]: \"validate\"\n    ‚úÖ Added to args: \"validate\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [validate]\n‚úÖ Validating configuration...\n‚úÖ ‚úÖ Configuration is valid",
        "stderr": "",
        "duration": 150.74616699999933,
        "memoryDelta": {
          "heapUsed": 0.07448577880859375,
          "heapTotal": 0,
          "rss": -0.046875,
          "external": 0.0004119873046875
        },
        "passed": true,
        "performance": {
          "duration": 150.74616699999933,
          "memoryDelta": {
            "heapUsed": 0.07448577880859375,
            "heapTotal": 0,
            "rss": -0.046875,
            "external": 0.0004119873046875
          }
        }
      },
      {
        "name": "config_export",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js config export",
        "args": [
          "export"
        ],
        "expectedExit": 0,
        "description": "Export configuration",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [export]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, config, export]\n  Processing arg[0]: \"export\"\n    ‚úÖ Added to args: \"export\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [export]\nConfiguration commands:\n  init [--force]                   Create default configuration\n  show [--format json]             Display current configuration\n  get <key>                        Get configuration value\n  set <key> <value>                Set configuration value\n  validate                         Validate configuration\n  reset --force                    Reset to defaults\n\nConfiguration Keys:\n  terminal.poolSize                Terminal pool size\n  terminal.recycleAfter            Commands before recycle\n  orchestrator.maxConcurrentTasks  Max parallel tasks\n  orchestrator.taskTimeout         Task timeout in ms\n  memory.backend                   Memory storage backend\n  memory.path                      Memory database path\n  agents.maxAgents                 Maximum number of agents\n\nExamples:\n  claude-flow config init\n  claude-flow config set terminal.poolSize 15\n  claude-flow config get orchestrator.maxConcurrentTasks\n  claude-flow config validate",
        "stderr": "",
        "duration": 129.16704200000095,
        "memoryDelta": {
          "heapUsed": 0.08191680908203125,
          "heapTotal": 0,
          "rss": 0.109375,
          "external": 0.0012655258178710938
        },
        "passed": true,
        "performance": {
          "duration": 129.16704200000095,
          "memoryDelta": {
            "heapUsed": 0.08191680908203125,
            "heapTotal": 0,
            "rss": 0.109375,
            "external": 0.0012655258178710938
          }
        }
      }
    ],
    "MCP Integration": [
      {
        "name": "mcp_status",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js mcp status",
        "args": [
          "status"
        ],
        "expectedExit": 0,
        "description": "MCP server status",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [status]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, mcp, status]\n  Processing arg[0]: \"status\"\n    ‚úÖ Added to args: \"status\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [status]\n‚úÖ MCP Server Status:\nüåê Status: Stopped (orchestrator not running)\nüîß Configuration: Default settings\nüîå Connections: 0 active\nüì° Tools: Ready to load\nüîê Authentication: Not configured",
        "stderr": "",
        "duration": 128.76829200000066,
        "memoryDelta": {
          "heapUsed": 0.07500457763671875,
          "heapTotal": 0,
          "rss": 0,
          "external": 0.0005273818969726562
        },
        "passed": true,
        "performance": {
          "duration": 128.76829200000066,
          "memoryDelta": {
            "heapUsed": 0.07500457763671875,
            "heapTotal": 0,
            "rss": 0,
            "external": 0.0005273818969726562
          }
        }
      },
      {
        "name": "mcp_list",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js mcp list",
        "args": [
          "list"
        ],
        "expectedExit": 0,
        "description": "List MCP servers",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [list]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, mcp, list]\n  Processing arg[0]: \"list\"\n    ‚úÖ Added to args: \"list\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [list]\nüîß Claude-Flow MCP Server Commands:\n\nCOMMANDS:\n  status                           Show MCP server status\n  start [options]                  Start MCP server with orchestrator\n  stop                             Stop MCP server gracefully\n  tools [options]                  List available tools & resources\n  auth <setup|status|rotate>       Manage authentication\n  config                           Show comprehensive configuration\n\nSTART OPTIONS:\n  --port <port>                    Server port (default: 3000)\n  --host <host>                    Server host (default: localhost)\n  --auto-orchestrator              Auto-start orchestrator with neural/WASM\n  --daemon                         Run in background daemon mode\n  --enable-neural                  Enable neural network features\n  --enable-wasm                    Enable WASM SIMD optimization\n\nTOOLS OPTIONS:\n  --category <cat>                 Filter by category (swarm, neural, memory, etc.)\n  --verbose, -v                    Show detailed tool information\n  --examples                       Show usage examples\n\nCATEGORIES:\n  swarm        üêù Swarm coordination (12 tools)\n  neural       üß† Neural networks & AI (15 tools)\n  memory       üíæ Memory & persistence (12 tools)\n  analysis     üìä Analysis & monitoring (13 tools)\n  workflow     üîß Workflow & automation (11 tools)\n  github       üêô GitHub integration (8 tools)\n  daa          ü§ñ Dynamic Agent Architecture (8 tools)\n  system       ‚öôÔ∏è System & utilities (8 tools)\n\nEXAMPLES:\n  claude-flow mcp status\n  claude-flow mcp start --auto-orchestrator --daemon\n  claude-flow mcp tools --category=neural --verbose\n  claude-flow mcp tools --category=swarm\n  claude-flow mcp config\n  claude-flow mcp auth setup\n\nüéØ Total: 87 tools & resources available\nüîó Full ruv-swarm + DAA + Claude-Flow integration",
        "stderr": "",
        "duration": 140.3356670000012,
        "memoryDelta": {
          "heapUsed": 0.08690643310546875,
          "heapTotal": 0.25,
          "rss": 0.921875,
          "external": 0.002079010009765625
        },
        "passed": true,
        "performance": {
          "duration": 140.3356670000012,
          "memoryDelta": {
            "heapUsed": 0.08690643310546875,
            "heapTotal": 0.25,
            "rss": 0.921875,
            "external": 0.002079010009765625
          }
        }
      },
      {
        "name": "mcp_test_connection",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js mcp test",
        "args": [
          "test"
        ],
        "expectedExit": 0,
        "description": "Test MCP connections",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [test]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, mcp, test]\n  Processing arg[0]: \"test\"\n    ‚úÖ Added to args: \"test\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [test]\nüîß Claude-Flow MCP Server Commands:\n\nCOMMANDS:\n  status                           Show MCP server status\n  start [options]                  Start MCP server with orchestrator\n  stop                             Stop MCP server gracefully\n  tools [options]                  List available tools & resources\n  auth <setup|status|rotate>       Manage authentication\n  config                           Show comprehensive configuration\n\nSTART OPTIONS:\n  --port <port>                    Server port (default: 3000)\n  --host <host>                    Server host (default: localhost)\n  --auto-orchestrator              Auto-start orchestrator with neural/WASM\n  --daemon                         Run in background daemon mode\n  --enable-neural                  Enable neural network features\n  --enable-wasm                    Enable WASM SIMD optimization\n\nTOOLS OPTIONS:\n  --category <cat>                 Filter by category (swarm, neural, memory, etc.)\n  --verbose, -v                    Show detailed tool information\n  --examples                       Show usage examples\n\nCATEGORIES:\n  swarm        üêù Swarm coordination (12 tools)\n  neural       üß† Neural networks & AI (15 tools)\n  memory       üíæ Memory & persistence (12 tools)\n  analysis     üìä Analysis & monitoring (13 tools)\n  workflow     üîß Workflow & automation (11 tools)\n  github       üêô GitHub integration (8 tools)\n  daa          ü§ñ Dynamic Agent Architecture (8 tools)\n  system       ‚öôÔ∏è System & utilities (8 tools)\n\nEXAMPLES:\n  claude-flow mcp status\n  claude-flow mcp start --auto-orchestrator --daemon\n  claude-flow mcp tools --category=neural --verbose\n  claude-flow mcp tools --category=swarm\n  claude-flow mcp config\n  claude-flow mcp auth setup\n\nüéØ Total: 87 tools & resources available\nüîó Full ruv-swarm + DAA + Claude-Flow integration",
        "stderr": "",
        "duration": 208.37745899999936,
        "memoryDelta": {
          "heapUsed": 0.099151611328125,
          "heapTotal": 0,
          "rss": 0.671875,
          "external": 0.002079010009765625
        },
        "passed": true,
        "performance": {
          "duration": 208.37745899999936,
          "memoryDelta": {
            "heapUsed": 0.099151611328125,
            "heapTotal": 0,
            "rss": 0.671875,
            "external": 0.002079010009765625
          }
        }
      }
    ],
    "Advanced Features": [
      {
        "name": "monitor_system",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js monitor system",
        "args": [
          "system"
        ],
        "expectedExit": 0,
        "description": "System monitoring",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [system]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, monitor, system]\n  Processing arg[0]: \"system\"\n    ‚úÖ Added to args: \"system\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [system]\nüìä System Metrics\n================\n\nüñ•Ô∏è  System Resources:\n   CPU Usage: 32.6%\n   Memory: 5624.0 MB\n   Disk Usage: 53.6%\n   Uptime: 17h 48m 6s\n\nüé≠ Orchestrator:\n   Status: üî¥ stopped\n   Active Agents: 4\n   Queued Tasks: 7\n   Completed: 32\n   Errors: 2\n\n‚ö° Performance:\n   Avg Task Duration: 4797ms\n   Throughput: 76.0 tasks/min\n   Success Rate: 87.2%\n\nüì¶ Resources:\n   Memory Entries: 83\n   Terminal Sessions: 3\n   MCP Connections: 1\n\n‚è∞ Last Updated: 3:30:50 PM",
        "stderr": "",
        "duration": 203.87795799999913,
        "memoryDelta": {
          "heapUsed": -0.6606674194335938,
          "heapTotal": 0,
          "rss": 0.5,
          "external": -0.008267402648925781
        },
        "passed": true,
        "performance": {
          "duration": 203.87795799999913,
          "memoryDelta": {
            "heapUsed": -0.6606674194335938,
            "heapTotal": 0,
            "rss": 0.5,
            "external": -0.008267402648925781
          }
        }
      },
      {
        "name": "analysis_performance",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js analysis performance",
        "args": [
          "performance"
        ],
        "expectedExit": 0,
        "description": "Performance analysis",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [performance]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, analysis, performance]\n  Processing arg[0]: \"performance\"\n    ‚úÖ Added to args: \"performance\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [performance]\n‚ùå Unknown analysis command: performance\n\nüìä Analysis Commands - Performance & Usage Analytics\n\nUSAGE:\n  claude-flow analysis <command> [options]\n\nCOMMANDS:\n  bottleneck-detect    Detect performance bottlenecks in the system\n  performance-report   Generate comprehensive performance reports\n  token-usage          Analyze token consumption and costs\n\nBOTTLENECK DETECT OPTIONS:\n  --scope <scope>      Analysis scope (default: system)\n                       Options: system, swarm, agent, task, memory\n  --target <target>    Specific target to analyze (default: all)\n                       Examples: agent-id, swarm-id, task-type\n\nPERFORMANCE REPORT OPTIONS:\n  --timeframe <time>   Report timeframe (default: 24h)\n                       Options: 1h, 6h, 24h, 7d, 30d\n  --format <format>    Report format (default: summary)\n                       Options: summary, detailed, json, csv\n\nTOKEN USAGE OPTIONS:\n  --agent <agent>      Filter by agent type or ID (default: all)\n  --breakdown          Include detailed breakdown by agent type\n  --cost-analysis      Include cost projections and optimization\n\nEXAMPLES:\n  # Detect system-wide bottlenecks\n  claude-flow analysis bottleneck-detect --scope system\n\n  # Agent-specific bottleneck analysis\n  claude-flow analysis bottleneck-detect --scope agent --target coordinator-1\n\n  # Weekly performance report\n  claude-flow analysis performance-report --timeframe 7d --format detailed\n\n  # Token usage with breakdown\n  claude-flow analysis token-usage --breakdown --cost-analysis\n\n  # Swarm-specific analysis\n  claude-flow analysis bottleneck-detect --scope swarm --target swarm-123\n\nüéØ Analysis helps with:\n  ‚Ä¢ Performance optimization\n  ‚Ä¢ Cost management\n  ‚Ä¢ Resource allocation\n  ‚Ä¢ Bottleneck identification\n  ‚Ä¢ Trend analysis",
        "stderr": "",
        "duration": 295.63704099999995,
        "memoryDelta": {
          "heapUsed": 0.07344818115234375,
          "heapTotal": 0,
          "rss": 0.125,
          "external": 0.002071380615234375
        },
        "passed": true,
        "performance": {
          "duration": 295.63704099999995,
          "memoryDelta": {
            "heapUsed": 0.07344818115234375,
            "heapTotal": 0,
            "rss": 0.125,
            "external": 0.002071380615234375
          }
        }
      },
      {
        "name": "sparc_status",
        "command": "node /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js sparc status",
        "args": [
          "status"
        ],
        "expectedExit": 0,
        "description": "SPARC framework status",
        "success": true,
        "exitCode": 0,
        "stdout": "üîç [DEEP DEBUG] parseFlags called with args: [status]\nüîç [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, sparc, status]\n  Processing arg[0]: \"status\"\n    ‚úÖ Added to args: \"status\"\nüéØ [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [status]\n‚ùå SPARC configuration file (.roomodes) not found\nPlease ensure .roomodes file exists in: /Users/elniak/Documents/Project/claude-code-flow\n\nTo enable SPARC development modes, run:\n  npx claude-flow@latest init --sparc",
        "stderr": "",
        "duration": 208.49383300000045,
        "memoryDelta": {
          "heapUsed": 0.071868896484375,
          "heapTotal": 0,
          "rss": 0.3125,
          "external": 0.0005502700805664062
        },
        "passed": true,
        "performance": {
          "duration": 208.49383300000045,
          "memoryDelta": {
            "heapUsed": 0.071868896484375,
            "heapTotal": 0,
            "rss": 0.3125,
            "external": 0.0005502700805664062
          }
        }
      }
    ]
  },
  "performanceMetrics": {
    "startup_time": {
      "name": "startup_time",
      "description": "CLI startup time",
      "times": [
        233.8145000000004,
        209.7784999999967,
        263.6587499999987,
        241.63262499999837,
        259.86741600000096,
        190.25016700000197,
        190.20616599999994,
        187.46229200000016,
        176.20408300000054,
        168.21008300000176
      ],
      "average": 212.10845819999994,
      "min": 168.21008300000176,
      "max": 263.6587499999987,
      "median": 200.01433349999934,
      "p95": 263.6587499999987,
      "memoryAverage": 0.1203125,
      "iterations": 10
    },
    "help_display": {
      "name": "help_display",
      "description": "Help display time",
      "times": [
        199.29670799999803,
        218.791792,
        241.95999999999913,
        223.79033300000083,
        176.7340409999997
      ],
      "average": 212.11457479999953,
      "min": 176.7340409999997,
      "max": 241.95999999999913,
      "median": 218.791792,
      "p95": 241.95999999999913,
      "memoryAverage": 0.00625,
      "iterations": 5
    },
    "status_check": {
      "name": "status_check",
      "description": "Status check time",
      "times": [
        170.9789579999997,
        166.0764999999992,
        174.67916599999808,
        171.56779200000165,
        170.87049999999726
      ],
      "average": 170.83458319999917,
      "min": 166.0764999999992,
      "max": 174.67916599999808,
      "median": 170.9789579999997,
      "p95": 174.67916599999808,
      "memoryAverage": 0.65,
      "iterations": 5
    },
    "config_access": {
      "name": "config_access",
      "description": "Configuration access time",
      "times": [
        203.9918749999997,
        210.71749999999884,
        274.3787080000002,
        191.82241599999907,
        169.36420799999905
      ],
      "average": 210.05494139999936,
      "min": 169.36420799999905,
      "max": 274.3787080000002,
      "median": 203.9918749999997,
      "p95": 274.3787080000002,
      "memoryAverage": -0.28125,
      "iterations": 5
    }
  },
  "regressionResults": {},
  "recommendations": [
    {
      "category": "Testing",
      "priority": "LOW",
      "issue": "Regular testing framework",
      "recommendation": "Run this test suite regularly as part of CI/CD pipeline"
    },
    {
      "category": "Monitoring",
      "priority": "MEDIUM",
      "issue": "Performance monitoring",
      "recommendation": "Implement continuous performance monitoring in production"
    }
  ],
  "environment": {
    "nodeVersion": "v23.11.0",
    "platform": "darwin",
    "cwd": "/Users/elniak/Documents/Project/claude-code-flow"
  }
}
