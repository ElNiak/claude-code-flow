{
  "categorization_metadata": {
    "analysis_date": "2025-07-13",
    "total_scripts": 47,
    "total_categories": 8,
    "analyzer": "NPM Scripts Categorization Team"
  },
  "categories": {
    "Build & Compilation": {
      "description": "Scripts for compiling, building, and packaging the application",
      "total_scripts": 7,
      "execution_time_range": "medium_to_very_long",
      "performance_impact": "medium_to_very_high",
      "scripts": {
        "build": {
          "command": "npm run clean && npm run update-version && npm run build:esm && npm run build:cjs && npm run build:binary",
          "description": "Complete build pipeline",
          "priority": "critical",
          "dependencies": ["clean", "update-version", "build:esm", "build:cjs", "build:binary"]
        },
        "build:esm": {
          "command": "tsc",
          "description": "Compile TypeScript to ESM format",
          "priority": "critical",
          "dependencies": ["tsconfig.json"]
        },
        "build:cjs": {
          "command": "tsc -p tsconfig.cjs.json",
          "description": "Compile TypeScript to CommonJS format",
          "priority": "critical",
          "dependencies": ["tsconfig.cjs.json"]
        },
        "build:ts": {
          "command": "npm run build:esm && npm run build:cjs",
          "description": "Build both ESM and CJS outputs",
          "priority": "medium",
          "dependencies": ["build:esm", "build:cjs"],
          "optimization_note": "Redundant with main build, could parallelize"
        },
        "build:binary": {
          "command": "pkg dist/cli/main.js --targets node20-linux-x64,node20-macos-x64,node20-win-x64 --output bin/claude-flow",
          "description": "Package into platform-specific binaries",
          "priority": "high",
          "dependencies": ["pkg", "dist/cli/main.js"]
        },
        "build:simple": {
          "command": "npm run build:ts && pkg dist/cli/simple-cli.js --output bin/claude-flow-simple",
          "description": "Build simplified binary version",
          "priority": "low",
          "dependencies": ["build:ts", "dist/cli/simple-cli.js"],
          "optimization_note": "Rarely used, consider removing"
        }
      },
      "optimization_opportunities": [
        "Parallelize ESM and CJS builds",
        "Cache intermediate build artifacts",
        "Remove rarely used build:simple",
        "Consolidate build:ts with main build pipeline"
      ]
    },
    "Testing & Quality": {
      "description": "Scripts for running tests, coverage analysis, and quality assurance",
      "total_scripts": 18,
      "execution_time_range": "fast_to_extremely_long",
      "performance_impact": "low_to_extremely_high",
      "scripts": {
        "test": {
          "command": "NODE_OPTIONS='--experimental-vm-modules' jest",
          "description": "Main test runner",
          "priority": "critical",
          "usage_frequency": "very_high"
        },
        "test:watch": {
          "command": "NODE_OPTIONS='--experimental-vm-modules' jest --watch",
          "description": "Watch mode testing for development",
          "priority": "high",
          "usage_frequency": "high"
        },
        "test:unit": {
          "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/unit",
          "description": "Unit tests only",
          "priority": "critical",
          "usage_frequency": "high"
        },
        "test:integration": {
          "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/integration",
          "description": "Integration tests only",
          "priority": "high",
          "usage_frequency": "medium"
        },
        "test:e2e": {
          "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/e2e",
          "description": "End-to-end tests",
          "priority": "high",
          "usage_frequency": "low",
          "execution_time": "very_long"
        },
        "test:cli": {
          "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/cli/__tests__",
          "description": "CLI-specific tests",
          "priority": "medium",
          "usage_frequency": "medium"
        },
        "test:coverage": {
          "command": "NODE_OPTIONS='--experimental-vm-modules' jest --coverage",
          "description": "All tests with coverage",
          "priority": "high",
          "usage_frequency": "medium",
          "execution_time": "very_long"
        },
        "test:coverage:unit": {
          "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/unit --coverage",
          "description": "Unit test coverage",
          "priority": "medium",
          "optimization_note": "Could be parameterized"
        },
        "test:coverage:integration": {
          "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/integration --coverage",
          "description": "Integration test coverage",
          "priority": "medium",
          "optimization_note": "Could be parameterized"
        },
        "test:coverage:e2e": {
          "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/e2e --coverage",
          "description": "E2E test coverage",
          "priority": "low",
          "optimization_note": "Rarely used, could be removed"
        },
        "test:ci": {
          "command": "NODE_OPTIONS='--experimental-vm-modules' jest --ci --coverage --maxWorkers=2",
          "description": "CI-optimized test run",
          "priority": "critical",
          "usage_frequency": "medium",
          "environment": "ci"
        },
        "test:comprehensive": {
          "command": "node scripts/test-comprehensive.js",
          "description": "Custom comprehensive test suite",
          "priority": "medium",
          "usage_frequency": "low",
          "execution_time": "extremely_long"
        },
        "test:comprehensive:verbose": {
          "command": "node scripts/test-comprehensive.js --verbose",
          "description": "Verbose comprehensive testing",
          "priority": "low",
          "optimization_note": "Could be parameterized"
        },
        "test:comprehensive:full": {
          "command": "node scripts/test-comprehensive.js --load --docker --npx",
          "description": "Full system testing with all components",
          "priority": "low",
          "execution_time": "extremely_long",
          "optimization_note": "Could be broken into CI jobs"
        },
        "test:docker": {
          "command": "node scripts/test-comprehensive.js --docker",
          "description": "Docker-specific tests",
          "priority": "medium",
          "environment": "docker_required"
        },
        "test:npx": {
          "command": "node scripts/test-comprehensive.js --npx",
          "description": "NPX installation/execution tests",
          "priority": "medium",
          "environment": "network_dependent"
        },
        "test:health": {
          "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/integration/system-integration.test.ts --testNamePattern='Health'",
          "description": "Health check tests",
          "priority": "medium",
          "execution_time": "fast"
        },
        "test:swarm": {
          "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/e2e/swarm-coordination.test.ts",
          "description": "Swarm coordination tests",
          "priority": "high",
          "execution_time": "long"
        }
      },
      "optimization_opportunities": [
        "Consolidate coverage scripts with parameterization",
        "Remove rarely used coverage variants",
        "Parallelize unit and integration tests",
        "Separate fast tests from slow E2E tests",
        "Create test hierarchy with dependency management"
      ]
    },
    "Development & Debugging": {
      "description": "Scripts for development workflow, debugging, and watch modes",
      "total_scripts": 4,
      "execution_time_range": "instant_to_persistent",
      "performance_impact": "low_to_high",
      "scripts": {
        "dev": {
          "command": "tsx src/cli/main.ts",
          "description": "Start development server",
          "priority": "critical",
          "usage_frequency": "high",
          "execution_time": "instant_start"
        },
        "typecheck:watch": {
          "command": "tsc --noEmit --watch",
          "description": "Continuous type checking",
          "priority": "medium",
          "usage_frequency": "medium",
          "execution_time": "persistent"
        },
        "dev:build": {
          "command": "tsc --watch",
          "description": "TypeScript compilation in watch mode",
          "priority": "medium",
          "usage_frequency": "medium",
          "execution_time": "persistent",
          "optimization_note": "Overlaps with typecheck:watch"
        },
        "test:debug": {
          "command": "NODE_OPTIONS='--experimental-vm-modules --inspect-brk' jest --runInBand --no-cache",
          "description": "Debug mode for tests",
          "priority": "medium",
          "usage_frequency": "low",
          "execution_time": "manual"
        }
      },
      "optimization_opportunities": [
        "Combine typecheck:watch and dev:build functionality",
        "Add hot reload to dev script",
        "Integrate watch modes with development workflow",
        "Add specific test file targeting for debug mode"
      ]
    },
    "Performance & Monitoring": {
      "description": "Scripts for performance testing, monitoring, and system diagnostics",
      "total_scripts": 5,
      "execution_time_range": "fast_to_very_long",
      "performance_impact": "low_to_very_high",
      "scripts": {
        "test:performance": {
          "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/performance",
          "description": "Performance tests and benchmarks",
          "priority": "medium",
          "usage_frequency": "low",
          "execution_time": "very_long"
        },
        "test:load": {
          "command": "node scripts/test-comprehensive.js --load",
          "description": "Load testing",
          "priority": "medium",
          "usage_frequency": "low",
          "execution_time": "very_long"
        },
        "test:benchmark": {
          "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/performance/benchmark.test.ts",
          "description": "Performance benchmarks",
          "priority": "medium",
          "usage_frequency": "low",
          "execution_time": "very_long"
        },
        "diagnostics": {
          "command": "node -e \"import('./dist/monitoring/diagnostics.js').then(m => m.DiagnosticManager.quickDiagnostic().then(console.log))\"",
          "description": "System diagnostics",
          "priority": "low",
          "usage_frequency": "low",
          "execution_time": "fast",
          "optimization_note": "Hard-coded path dependency"
        },
        "health-check": {
          "command": "node -e \"import('./dist/monitoring/health-check.js').then(m => new m.HealthCheckManager().performHealthCheck().then(console.log))\"",
          "description": "System health check",
          "priority": "medium",
          "usage_frequency": "medium",
          "execution_time": "fast",
          "optimization_note": "Hard-coded path dependency"
        }
      },
      "optimization_opportunities": [
        "Simplify diagnostics and health-check to use CLI interface",
        "Consolidate performance testing tools",
        "Generate performance reports and tracking",
        "Separate load testing into dedicated tool",
        "Remove hard-coded path dependencies"
      ]
    },
    "Linting & Formatting": {
      "description": "Scripts for code quality, style enforcement, and type checking",
      "total_scripts": 3,
      "execution_time_range": "fast_to_medium",
      "performance_impact": "low_to_medium",
      "scripts": {
        "lint": {
          "command": "eslint src --ext .ts,.js",
          "description": "Code linting with ESLint",
          "priority": "high",
          "usage_frequency": "high",
          "execution_time": "medium"
        },
        "format": {
          "command": "prettier --write src",
          "description": "Code formatting with Prettier",
          "priority": "high",
          "usage_frequency": "high",
          "execution_time": "fast"
        },
        "typecheck": {
          "command": "tsc --noEmit",
          "description": "TypeScript type checking",
          "priority": "high",
          "usage_frequency": "high",
          "execution_time": "medium"
        }
      },
      "optimization_opportunities": [
        "Add auto-fix option to lint script",
        "Integrate with pre-commit hooks",
        "Add format checking in CI",
        "Combine type checking with build process"
      ]
    },
    "Deployment & Publishing": {
      "description": "Scripts for versioning, publishing, and release management",
      "total_scripts": 8,
      "execution_time_range": "instant_to_medium",
      "performance_impact": "none_to_medium",
      "scripts": {
        "prepublishOnly": {
          "command": "npm run update-version",
          "description": "Pre-publish version update",
          "priority": "critical",
          "usage_frequency": "automatic",
          "lifecycle": "npm_hook"
        },
        "publish:alpha": {
          "command": "npm publish --tag alpha",
          "description": "Publish alpha release",
          "priority": "high",
          "usage_frequency": "medium"
        },
        "publish:major": {
          "command": "npm version major && npm publish",
          "description": "Major version release",
          "priority": "high",
          "usage_frequency": "low"
        },
        "publish:minor": {
          "command": "npm version minor && npm publish",
          "description": "Minor version release",
          "priority": "high",
          "usage_frequency": "medium"
        },
        "publish:patch": {
          "command": "npm version patch && npm publish",
          "description": "Patch version release",
          "priority": "high",
          "usage_frequency": "high"
        },
        "prepack": {
          "command": "echo 'Alpha release - skipping build for now'",
          "description": "Pre-packaging hook (disabled)",
          "priority": "low",
          "usage_frequency": "automatic",
          "lifecycle": "npm_hook",
          "optimization_note": "Temporary alpha workaround"
        },
        "postpack": {
          "command": "echo 'Package created successfully'",
          "description": "Post-packaging confirmation",
          "priority": "low",
          "usage_frequency": "automatic",
          "lifecycle": "npm_hook"
        },
        "prepare-publish": {
          "command": "node scripts/prepare-publish.js",
          "description": "Prepare package for publishing",
          "priority": "medium",
          "usage_frequency": "low"
        }
      },
      "optimization_opportunities": [
        "Add changelog generation to version scripts",
        "Add confirmation prompts for releases",
        "Enable proper build in prepack for production",
        "Add package validation in postpack",
        "Integrate with CI/CD pipeline"
      ]
    },
    "Maintenance & Utilities": {
      "description": "Scripts for cleanup, installation, and general maintenance",
      "total_scripts": 2,
      "execution_time_range": "fast",
      "performance_impact": "low",
      "scripts": {
        "clean": {
          "command": "rm -rf dist dist-cjs",
          "description": "Clean build output directories",
          "priority": "high",
          "usage_frequency": "medium",
          "platform_compatibility": "unix_only",
          "optimization_note": "Use cross-platform rimraf"
        },
        "update-version": {
          "command": "node scripts/update-bin-version.js",
          "description": "Update binary version information",
          "priority": "medium",
          "usage_frequency": "low"
        },
        "postinstall": {
          "command": "node scripts/install.js",
          "description": "Post-installation setup",
          "priority": "medium",
          "usage_frequency": "automatic",
          "lifecycle": "npm_hook"
        }
      },
      "optimization_opportunities": [
        "Make clean script cross-platform",
        "Add safety checks to clean script",
        "Integrate version updates with git hooks",
        "Make postinstall more robust for different environments"
      ]
    }
  },
  "lifecycle_scripts": {
    "description": "NPM lifecycle hooks that run automatically",
    "scripts": ["test", "postinstall", "prepublishOnly", "prepack", "postpack"],
    "note": "These scripts are triggered automatically by NPM during specific operations"
  },
  "usage_frequency_analysis": {
    "very_high": ["test", "dev"],
    "high": ["build:esm", "build:cjs", "test:unit", "test:watch", "lint", "format", "typecheck", "publish:patch"],
    "medium": ["build", "test:integration", "test:coverage", "test:ci", "test:health", "test:swarm", "typecheck:watch", "dev:build", "health-check", "publish:alpha", "publish:minor", "clean"],
    "low": ["build:binary", "test:e2e", "test:performance", "test:comprehensive", "test:load", "test:docker", "test:npx", "test:benchmark", "test:debug", "diagnostics", "publish:major", "update-version", "prepare-publish"],
    "very_low": ["build:simple", "test:coverage:e2e", "test:comprehensive:verbose", "test:comprehensive:full"],
    "automatic": ["postinstall", "prepublishOnly", "prepack", "postpack"]
  }
}