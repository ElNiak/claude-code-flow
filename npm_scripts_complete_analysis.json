{
	"metadata": {
		"analysis_date": "2025-07-13",
		"total_scripts": 47,
		"package_name": "claude-flow",
		"package_version": "2.0.0-alpha.49",
		"analyzer": "NPM Scripts Categorization Team"
	},
	"scripts": {
		"dev": {
			"command": "tsx src/cli/main.ts",
			"category": "Development & Debugging",
			"subcategory": "Development Server",
			"description": "Start development server with TypeScript execution",
			"dependencies": ["tsx package"],
			"environment": "development",
			"execution_time": "instant_start",
			"usage_frequency": "high",
			"platform_compatibility": "cross-platform",
			"performance_impact": "low",
			"error_handling": "basic",
			"optimization_opportunities": [
				"Could add watch mode",
				"Could add hot reload"
			]
		},
		"build": {
			"command": "npm run clean && npm run update-version && npm run build:esm && npm run build:cjs && npm run build:binary",
			"category": "Build & Compilation",
			"subcategory": "Complete Build Pipeline",
			"description": "Full build pipeline including cleanup, versioning, and multi-format compilation",
			"dependencies": [
				"clean",
				"update-version",
				"build:esm",
				"build:cjs",
				"build:binary"
			],
			"environment": "production",
			"execution_time": "long",
			"usage_frequency": "medium",
			"platform_compatibility": "cross-platform",
			"performance_impact": "high",
			"error_handling": "sequential_failure",
			"optimization_opportunities": [
				"Could parallelize ESM/CJS builds",
				"Could cache intermediate builds"
			]
		},
		"update-version": {
			"command": "node scripts/update-bin-version.js",
			"category": "Maintenance & Utilities",
			"subcategory": "Version Management",
			"description": "Updates binary version information",
			"dependencies": ["scripts/update-bin-version.js"],
			"environment": "any",
			"execution_time": "fast",
			"usage_frequency": "low",
			"platform_compatibility": "cross-platform",
			"performance_impact": "low",
			"error_handling": "basic",
			"optimization_opportunities": ["Could integrate with git hooks"]
		},
		"clean": {
			"command": "rm -rf dist dist-cjs",
			"category": "Maintenance & Utilities",
			"subcategory": "Cleanup",
			"description": "Remove build output directories",
			"dependencies": [],
			"environment": "any",
			"execution_time": "fast",
			"usage_frequency": "medium",
			"platform_compatibility": "unix-only",
			"performance_impact": "low",
			"error_handling": "none",
			"optimization_opportunities": [
				"Use cross-platform rimraf",
				"Add safety checks"
			]
		},
		"build:esm": {
			"command": "tsc",
			"category": "Build & Compilation",
			"subcategory": "TypeScript Compilation",
			"description": "Compile TypeScript to ESM format",
			"dependencies": ["tsconfig.json"],
			"environment": "any",
			"execution_time": "medium",
			"usage_frequency": "high",
			"platform_compatibility": "cross-platform",
			"performance_impact": "medium",
			"error_handling": "typescript_errors",
			"optimization_opportunities": [
				"Could add incremental compilation",
				"Could parallelize with CJS build"
			]
		},
		"build:cjs": {
			"command": "tsc -p tsconfig.cjs.json",
			"category": "Build & Compilation",
			"subcategory": "TypeScript Compilation",
			"description": "Compile TypeScript to CommonJS format",
			"dependencies": ["tsconfig.cjs.json"],
			"environment": "any",
			"execution_time": "medium",
			"usage_frequency": "high",
			"platform_compatibility": "cross-platform",
			"performance_impact": "medium",
			"error_handling": "typescript_errors",
			"optimization_opportunities": [
				"Could add incremental compilation",
				"Could parallelize with ESM build"
			]
		},
		"build:ts": {
			"command": "npm run build:esm && npm run build:cjs",
			"category": "Build & Compilation",
			"subcategory": "TypeScript Build Aggregate",
			"description": "Build both ESM and CJS TypeScript outputs",
			"dependencies": ["build:esm", "build:cjs"],
			"environment": "any",
			"execution_time": "medium",
			"usage_frequency": "medium",
			"platform_compatibility": "cross-platform",
			"performance_impact": "medium",
			"error_handling": "sequential_failure",
			"optimization_opportunities": [
				"Should parallelize ESM and CJS builds",
				"Redundant with main build command"
			]
		},
		"build:binary": {
			"command": "pkg dist/cli/main.js --targets node20-linux-x64,node20-macos-x64,node20-win-x64 --output bin/claude-flow",
			"category": "Build & Compilation",
			"subcategory": "Binary Packaging",
			"description": "Package compiled JS into platform-specific binaries",
			"dependencies": ["pkg", "dist/cli/main.js"],
			"environment": "any",
			"execution_time": "long",
			"usage_frequency": "low",
			"platform_compatibility": "cross-platform",
			"performance_impact": "high",
			"error_handling": "pkg_errors",
			"optimization_opportunities": [
				"Could cache unchanged binaries",
				"Could parallelize platform builds"
			]
		},
		"build:simple": {
			"command": "npm run build:ts && pkg dist/cli/simple-cli.js --output bin/claude-flow-simple",
			"category": "Build & Compilation",
			"subcategory": "Alternative Binary Build",
			"description": "Build simplified binary version",
			"dependencies": ["build:ts", "dist/cli/simple-cli.js"],
			"environment": "any",
			"execution_time": "long",
			"usage_frequency": "very_low",
			"platform_compatibility": "cross-platform",
			"performance_impact": "high",
			"error_handling": "sequential_failure",
			"optimization_opportunities": [
				"Could be consolidated with main binary build",
				"Rarely used - consider removing"
			]
		},
		"typecheck": {
			"command": "tsc --noEmit",
			"category": "Linting & Formatting",
			"subcategory": "Type Checking",
			"description": "Type check TypeScript without emitting files",
			"dependencies": ["tsconfig.json"],
			"environment": "any",
			"execution_time": "medium",
			"usage_frequency": "high",
			"platform_compatibility": "cross-platform",
			"performance_impact": "medium",
			"error_handling": "typescript_errors",
			"optimization_opportunities": [
				"Could add to pre-commit hooks",
				"Could run in watch mode by default"
			]
		},
		"typecheck:watch": {
			"command": "tsc --noEmit --watch",
			"category": "Development & Debugging",
			"subcategory": "Watch Mode",
			"description": "Continuous type checking in watch mode",
			"dependencies": ["tsconfig.json"],
			"environment": "development",
			"execution_time": "persistent",
			"usage_frequency": "medium",
			"platform_compatibility": "cross-platform",
			"performance_impact": "low_continuous",
			"error_handling": "typescript_errors",
			"optimization_opportunities": ["Could integrate with dev script"]
		},
		"dev:build": {
			"command": "tsc --watch",
			"category": "Development & Debugging",
			"subcategory": "Development Build",
			"description": "TypeScript compilation in watch mode",
			"dependencies": ["tsconfig.json"],
			"environment": "development",
			"execution_time": "persistent",
			"usage_frequency": "medium",
			"platform_compatibility": "cross-platform",
			"performance_impact": "low_continuous",
			"error_handling": "typescript_errors",
			"optimization_opportunities": [
				"Could combine with typecheck:watch",
				"Overlaps with typecheck:watch functionality"
			]
		},
		"test": {
			"command": "NODE_OPTIONS='--experimental-vm-modules' jest",
			"category": "Testing & Quality",
			"subcategory": "Main Test Runner",
			"description": "Run all tests with Jest",
			"dependencies": ["jest.config.js"],
			"environment": "test",
			"execution_time": "long",
			"usage_frequency": "very_high",
			"platform_compatibility": "cross-platform",
			"performance_impact": "high",
			"error_handling": "test_failures",
			"optimization_opportunities": [
				"Could add parallel execution",
				"Could cache test results"
			]
		},
		"test:watch": {
			"command": "NODE_OPTIONS='--experimental-vm-modules' jest --watch",
			"category": "Testing & Quality",
			"subcategory": "Watch Mode Testing",
			"description": "Run tests in watch mode for development",
			"dependencies": ["jest.config.js"],
			"environment": "development",
			"execution_time": "persistent",
			"usage_frequency": "high",
			"platform_compatibility": "cross-platform",
			"performance_impact": "medium_continuous",
			"error_handling": "test_failures",
			"optimization_opportunities": ["Could optimize file watching patterns"]
		},
		"test:unit": {
			"command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/unit",
			"category": "Testing & Quality",
			"subcategory": "Unit Testing",
			"description": "Run unit tests only",
			"dependencies": ["jest.config.js", "src/__tests__/unit"],
			"environment": "test",
			"execution_time": "medium",
			"usage_frequency": "high",
			"platform_compatibility": "cross-platform",
			"performance_impact": "medium",
			"error_handling": "test_failures",
			"optimization_opportunities": [
				"Could run in parallel with other test types"
			]
		},
		"test:integration": {
			"command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/integration",
			"category": "Testing & Quality",
			"subcategory": "Integration Testing",
			"description": "Run integration tests only",
			"dependencies": ["jest.config.js", "src/__tests__/integration"],
			"environment": "test",
			"execution_time": "long",
			"usage_frequency": "medium",
			"platform_compatibility": "cross-platform",
			"performance_impact": "high",
			"error_handling": "test_failures",
			"optimization_opportunities": ["Could run in parallel with unit tests"]
		},
		"test:e2e": {
			"command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/e2e",
			"category": "Testing & Quality",
			"subcategory": "End-to-End Testing",
			"description": "Run end-to-end tests only",
			"dependencies": ["jest.config.js", "src/__tests__/e2e"],
			"environment": "test",
			"execution_time": "very_long",
			"usage_frequency": "low",
			"platform_compatibility": "cross-platform",
			"performance_impact": "very_high",
			"error_handling": "test_failures",
			"optimization_opportunities": ["Could run separately from faster tests"]
		},
		"test:performance": {
			"command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/performance",
			"category": "Performance & Monitoring",
			"subcategory": "Performance Testing",
			"description": "Run performance tests and benchmarks",
			"dependencies": ["jest.config.js", "src/__tests__/performance"],
			"environment": "test",
			"execution_time": "very_long",
			"usage_frequency": "low",
			"platform_compatibility": "cross-platform",
			"performance_impact": "very_high",
			"error_handling": "test_failures",
			"optimization_opportunities": [
				"Could run in isolated environment",
				"Could generate performance reports"
			]
		},
		"test:cli": {
			"command": "NODE_OPTIONS='--experimental-vm-modules' jest src/cli/__tests__",
			"category": "Testing & Quality",
			"subcategory": "CLI Testing",
			"description": "Run CLI-specific tests",
			"dependencies": ["jest.config.js", "src/cli/__tests__"],
			"environment": "test",
			"execution_time": "medium",
			"usage_frequency": "medium",
			"platform_compatibility": "cross-platform",
			"performance_impact": "medium",
			"error_handling": "test_failures",
			"optimization_opportunities": ["Could be integrated with unit tests"]
		},
		"test:coverage": {
			"command": "NODE_OPTIONS='--experimental-vm-modules' jest --coverage",
			"category": "Testing & Quality",
			"subcategory": "Coverage Analysis",
			"description": "Run all tests with coverage reporting",
			"dependencies": ["jest.config.js"],
			"environment": "test",
			"execution_time": "very_long",
			"usage_frequency": "medium",
			"platform_compatibility": "cross-platform",
			"performance_impact": "very_high",
			"error_handling": "test_failures",
			"optimization_opportunities": [
				"Could cache coverage data",
				"Could generate HTML reports"
			]
		},
		"test:coverage:unit": {
			"command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/unit --coverage",
			"category": "Testing & Quality",
			"subcategory": "Unit Test Coverage",
			"description": "Run unit tests with coverage",
			"dependencies": ["jest.config.js", "src/__tests__/unit"],
			"environment": "test",
			"execution_time": "long",
			"usage_frequency": "medium",
			"platform_compatibility": "cross-platform",
			"performance_impact": "high",
			"error_handling": "test_failures",
			"optimization_opportunities": [
				"Could be parameterized with main coverage script"
			]
		},
		"test:coverage:integration": {
			"command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/integration --coverage",
			"category": "Testing & Quality",
			"subcategory": "Integration Test Coverage",
			"description": "Run integration tests with coverage",
			"dependencies": ["jest.config.js", "src/__tests__/integration"],
			"environment": "test",
			"execution_time": "very_long",
			"usage_frequency": "low",
			"platform_compatibility": "cross-platform",
			"performance_impact": "very_high",
			"error_handling": "test_failures",
			"optimization_opportunities": [
				"Could be parameterized with main coverage script"
			]
		},
		"test:coverage:e2e": {
			"command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/e2e --coverage",
			"category": "Testing & Quality",
			"subcategory": "E2E Test Coverage",
			"description": "Run e2e tests with coverage",
			"dependencies": ["jest.config.js", "src/__tests__/e2e"],
			"environment": "test",
			"execution_time": "extremely_long",
			"usage_frequency": "very_low",
			"platform_compatibility": "cross-platform",
			"performance_impact": "extremely_high",
			"error_handling": "test_failures",
			"optimization_opportunities": [
				"Could be parameterized with main coverage script",
				"Rarely used - consider removing"
			]
		},
		"test:ci": {
			"command": "NODE_OPTIONS='--experimental-vm-modules' jest --ci --coverage --maxWorkers=2",
			"category": "Testing & Quality",
			"subcategory": "CI/CD Testing",
			"description": "Optimized test run for CI environments",
			"dependencies": ["jest.config.js"],
			"environment": "ci",
			"execution_time": "very_long",
			"usage_frequency": "medium",
			"platform_compatibility": "cross-platform",
			"performance_impact": "controlled_high",
			"error_handling": "test_failures",
			"optimization_opportunities": [
				"Could adjust worker count based on CI resources"
			]
		},
		"test:debug": {
			"command": "NODE_OPTIONS='--experimental-vm-modules --inspect-brk' jest --runInBand --no-cache",
			"category": "Development & Debugging",
			"subcategory": "Test Debugging",
			"description": "Run tests in debug mode with inspector",
			"dependencies": ["jest.config.js"],
			"environment": "development",
			"execution_time": "manual",
			"usage_frequency": "low",
			"platform_compatibility": "cross-platform",
			"performance_impact": "high",
			"error_handling": "debug_mode",
			"optimization_opportunities": ["Could add specific test file targeting"]
		},
		"test:comprehensive": {
			"command": "node scripts/test-comprehensive.js",
			"category": "Testing & Quality",
			"subcategory": "Comprehensive Testing",
			"description": "Run comprehensive test suite with custom script",
			"dependencies": ["scripts/test-comprehensive.js"],
			"environment": "test",
			"execution_time": "extremely_long",
			"usage_frequency": "low",
			"platform_compatibility": "cross-platform",
			"performance_impact": "extremely_high",
			"error_handling": "script_dependent",
			"optimization_opportunities": ["Could be broken down into smaller chunks"]
		},
		"test:comprehensive:verbose": {
			"command": "node scripts/test-comprehensive.js --verbose",
			"category": "Testing & Quality",
			"subcategory": "Verbose Comprehensive Testing",
			"description": "Run comprehensive tests with verbose output",
			"dependencies": ["scripts/test-comprehensive.js"],
			"environment": "test",
			"execution_time": "extremely_long",
			"usage_frequency": "very_low",
			"platform_compatibility": "cross-platform",
			"performance_impact": "extremely_high",
			"error_handling": "script_dependent",
			"optimization_opportunities": [
				"Could be parameterized with main comprehensive script"
			]
		},
		"test:comprehensive:full": {
			"command": "node scripts/test-comprehensive.js --load --docker --npx",
			"category": "Testing & Quality",
			"subcategory": "Full System Testing",
			"description": "Run comprehensive tests with load, docker, and npx tests",
			"dependencies": ["scripts/test-comprehensive.js", "docker", "npx"],
			"environment": "test",
			"execution_time": "extremely_long",
			"usage_frequency": "very_low",
			"platform_compatibility": "limited",
			"performance_impact": "extremely_high",
			"error_handling": "complex_dependencies",
			"optimization_opportunities": ["Could be broken into separate CI jobs"]
		},
		"test:load": {
			"command": "node scripts/test-comprehensive.js --load",
			"category": "Performance & Monitoring",
			"subcategory": "Load Testing",
			"description": "Run load testing specifically",
			"dependencies": ["scripts/test-comprehensive.js"],
			"environment": "test",
			"execution_time": "very_long",
			"usage_frequency": "low",
			"platform_compatibility": "cross-platform",
			"performance_impact": "very_high",
			"error_handling": "script_dependent",
			"optimization_opportunities": [
				"Could be separated into dedicated load testing tool"
			]
		},
		"test:docker": {
			"command": "node scripts/test-comprehensive.js --docker",
			"category": "Testing & Quality",
			"subcategory": "Docker Testing",
			"description": "Run Docker-specific tests",
			"dependencies": ["scripts/test-comprehensive.js", "docker"],
			"environment": "test",
			"execution_time": "very_long",
			"usage_frequency": "low",
			"platform_compatibility": "docker_required",
			"performance_impact": "very_high",
			"error_handling": "docker_dependent",
			"optimization_opportunities": [
				"Could be separated into CI-only environment"
			]
		},
		"test:npx": {
			"command": "node scripts/test-comprehensive.js --npx",
			"category": "Testing & Quality",
			"subcategory": "NPX Testing",
			"description": "Test NPX package installation and execution",
			"dependencies": ["scripts/test-comprehensive.js", "npx"],
			"environment": "test",
			"execution_time": "long",
			"usage_frequency": "low",
			"platform_compatibility": "cross-platform",
			"performance_impact": "high",
			"error_handling": "network_dependent",
			"optimization_opportunities": [
				"Could be separated into integration test category"
			]
		},
		"test:health": {
			"command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/integration/system-integration.test.ts --testNamePattern='Health'",
			"category": "Testing & Quality",
			"subcategory": "Health Check Testing",
			"description": "Run health check specific tests",
			"dependencies": [
				"jest.config.js",
				"src/__tests__/integration/system-integration.test.ts"
			],
			"environment": "test",
			"execution_time": "fast",
			"usage_frequency": "medium",
			"platform_compatibility": "cross-platform",
			"performance_impact": "low",
			"error_handling": "test_failures",
			"optimization_opportunities": ["Could be automated in CI health checks"]
		},
		"test:swarm": {
			"command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/e2e/swarm-coordination.test.ts",
			"category": "Testing & Quality",
			"subcategory": "Swarm Testing",
			"description": "Test swarm coordination functionality",
			"dependencies": [
				"jest.config.js",
				"src/__tests__/e2e/swarm-coordination.test.ts"
			],
			"environment": "test",
			"execution_time": "long",
			"usage_frequency": "medium",
			"platform_compatibility": "cross-platform",
			"performance_impact": "high",
			"error_handling": "test_failures",
			"optimization_opportunities": ["Could be part of e2e test suite"]
		},
		"test:benchmark": {
			"command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/performance/benchmark.test.ts",
			"category": "Performance & Monitoring",
			"subcategory": "Benchmark Testing",
			"description": "Run performance benchmarks",
			"dependencies": [
				"jest.config.js",
				"src/__tests__/performance/benchmark.test.ts"
			],
			"environment": "test",
			"execution_time": "very_long",
			"usage_frequency": "low",
			"platform_compatibility": "cross-platform",
			"performance_impact": "very_high",
			"error_handling": "test_failures",
			"optimization_opportunities": [
				"Could generate benchmark reports",
				"Could track performance over time"
			]
		},
		"lint": {
			"command": "eslint src --ext .ts,.js",
			"category": "Linting & Formatting",
			"subcategory": "Code Linting",
			"description": "Run ESLint on TypeScript and JavaScript files",
			"dependencies": [".eslintrc"],
			"environment": "any",
			"execution_time": "medium",
			"usage_frequency": "high",
			"platform_compatibility": "cross-platform",
			"performance_impact": "medium",
			"error_handling": "lint_errors",
			"optimization_opportunities": [
				"Could add auto-fix option",
				"Could be added to pre-commit hooks"
			]
		},
		"format": {
			"command": "prettier --write src",
			"category": "Linting & Formatting",
			"subcategory": "Code Formatting",
			"description": "Format source code with Prettier",
			"dependencies": [".prettierrc"],
			"environment": "any",
			"execution_time": "fast",
			"usage_frequency": "high",
			"platform_compatibility": "cross-platform",
			"performance_impact": "low",
			"error_handling": "format_errors",
			"optimization_opportunities": [
				"Could be added to pre-commit hooks",
				"Could check formatting in CI"
			]
		},
		"diagnostics": {
			"command": "node -e \"import('./dist/monitoring/diagnostics.js').then(m => m.DiagnosticManager.quickDiagnostic().then(console.log))\"",
			"category": "Performance & Monitoring",
			"subcategory": "System Diagnostics",
			"description": "Run system diagnostics check",
			"dependencies": ["dist/monitoring/diagnostics.js"],
			"environment": "any",
			"execution_time": "fast",
			"usage_frequency": "low",
			"platform_compatibility": "cross-platform",
			"performance_impact": "low",
			"error_handling": "module_dependent",
			"optimization_opportunities": [
				"Could be simplified to use CLI interface",
				"Hard-coded path dependency"
			]
		},
		"health-check": {
			"command": "node -e \"import('./dist/monitoring/health-check.js').then(m => new m.HealthCheckManager().performHealthCheck().then(console.log))\"",
			"category": "Performance & Monitoring",
			"subcategory": "Health Monitoring",
			"description": "Perform system health check",
			"dependencies": ["dist/monitoring/health-check.js"],
			"environment": "any",
			"execution_time": "fast",
			"usage_frequency": "medium",
			"platform_compatibility": "cross-platform",
			"performance_impact": "low",
			"error_handling": "module_dependent",
			"optimization_opportunities": [
				"Could be simplified to use CLI interface",
				"Hard-coded path dependency"
			]
		},
		"postinstall": {
			"command": "node scripts/install.js",
			"category": "Maintenance & Utilities",
			"subcategory": "Installation Hook",
			"description": "Post-installation setup script",
			"dependencies": ["scripts/install.js"],
			"environment": "install",
			"execution_time": "fast",
			"usage_frequency": "automatic",
			"platform_compatibility": "cross-platform",
			"performance_impact": "low",
			"error_handling": "script_dependent",
			"optimization_opportunities": [
				"Could be made more robust for different environments"
			]
		},
		"prepublishOnly": {
			"command": "npm run update-version",
			"category": "Deployment & Publishing",
			"subcategory": "Pre-publish Hook",
			"description": "Update version before publishing",
			"dependencies": ["update-version"],
			"environment": "publish",
			"execution_time": "fast",
			"usage_frequency": "automatic",
			"platform_compatibility": "cross-platform",
			"performance_impact": "low",
			"error_handling": "script_dependent",
			"optimization_opportunities": ["Could add build verification"]
		},
		"publish:alpha": {
			"command": "npm publish --tag alpha",
			"category": "Deployment & Publishing",
			"subcategory": "Alpha Release",
			"description": "Publish package with alpha tag",
			"dependencies": [],
			"environment": "publish",
			"execution_time": "medium",
			"usage_frequency": "medium",
			"platform_compatibility": "cross-platform",
			"performance_impact": "medium",
			"error_handling": "npm_publish_errors",
			"optimization_opportunities": ["Could add pre-publish verification"]
		},
		"publish:major": {
			"command": "npm version major && npm publish",
			"category": "Deployment & Publishing",
			"subcategory": "Major Release",
			"description": "Bump major version and publish",
			"dependencies": [],
			"environment": "publish",
			"execution_time": "medium",
			"usage_frequency": "low",
			"platform_compatibility": "cross-platform",
			"performance_impact": "medium",
			"error_handling": "version_publish_errors",
			"optimization_opportunities": [
				"Could add changelog generation",
				"Could add confirmation prompt"
			]
		},
		"publish:minor": {
			"command": "npm version minor && npm publish",
			"category": "Deployment & Publishing",
			"subcategory": "Minor Release",
			"description": "Bump minor version and publish",
			"dependencies": [],
			"environment": "publish",
			"execution_time": "medium",
			"usage_frequency": "medium",
			"platform_compatibility": "cross-platform",
			"performance_impact": "medium",
			"error_handling": "version_publish_errors",
			"optimization_opportunities": [
				"Could add changelog generation",
				"Could add confirmation prompt"
			]
		},
		"publish:patch": {
			"command": "npm version patch && npm publish",
			"category": "Deployment & Publishing",
			"subcategory": "Patch Release",
			"description": "Bump patch version and publish",
			"dependencies": [],
			"environment": "publish",
			"execution_time": "medium",
			"usage_frequency": "high",
			"platform_compatibility": "cross-platform",
			"performance_impact": "medium",
			"error_handling": "version_publish_errors",
			"optimization_opportunities": [
				"Could add changelog generation",
				"Could add confirmation prompt"
			]
		},
		"prepack": {
			"command": "echo 'Alpha release - skipping build for now'",
			"category": "Deployment & Publishing",
			"subcategory": "Pre-pack Hook",
			"description": "Pre-packaging hook (currently disabled for alpha)",
			"dependencies": [],
			"environment": "pack",
			"execution_time": "instant",
			"usage_frequency": "automatic",
			"platform_compatibility": "cross-platform",
			"performance_impact": "none",
			"error_handling": "none",
			"optimization_opportunities": [
				"Should include actual build for production",
				"Temporary alpha workaround"
			]
		},
		"postpack": {
			"command": "echo 'Package created successfully'",
			"category": "Deployment & Publishing",
			"subcategory": "Post-pack Hook",
			"description": "Post-packaging confirmation message",
			"dependencies": [],
			"environment": "pack",
			"execution_time": "instant",
			"usage_frequency": "automatic",
			"platform_compatibility": "cross-platform",
			"performance_impact": "none",
			"error_handling": "none",
			"optimization_opportunities": [
				"Could add package validation",
				"Could add artifact information"
			]
		},
		"prepare-publish": {
			"command": "node scripts/prepare-publish.js",
			"category": "Deployment & Publishing",
			"subcategory": "Publish Preparation",
			"description": "Prepare package for publishing",
			"dependencies": ["scripts/prepare-publish.js"],
			"environment": "publish",
			"execution_time": "medium",
			"usage_frequency": "low",
			"platform_compatibility": "cross-platform",
			"performance_impact": "medium",
			"error_handling": "script_dependent",
			"optimization_opportunities": [
				"Could be integrated with publishing pipeline"
			]
		}
	}
}
