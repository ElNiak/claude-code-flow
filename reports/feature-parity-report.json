{
  "summary": {
    "total": 24,
    "passed": 3,
    "failed": 18,
    "skipped": 3,
    "warnings": 0,
    "successRate": "14.3"
  },
  "results": {
    "passed": [
      "core.help",
      "core.version",
      "hooks.postEdit"
    ],
    "failed": [
      {
        "id": "core.init",
        "feature": {
          "command": "--init",
          "description": "Initialize Claude Flow project",
          "expectedOutput": {},
          "validateFiles": [
            "claude-flow.config.js"
          ],
          "priority": "critical"
        },
        "error": "❌ Error: Unknown command: --init\n",
        "output": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [--init]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, --init]\n  Processing arg[0]: \"--init\"\n    Flag detected: \"init\", next arg: \"undefined\"\n    ✅ Set boolean flag \"init\" = true\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {\n  \"init\": true\n}\n  args: []\nRun \"claude-flow help\" for available commands\n"
      },
      {
        "id": "mcp.start",
        "feature": {
          "command": "mcp start",
          "description": "Start MCP server",
          "expectedOutput": {},
          "timeout": 5000,
          "priority": "critical",
          "async": true
        },
        "error": "Output mismatch",
        "expected": "/MCP server started|Listening/",
        "actual": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [start]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, mcp, start]\n  Processing arg[0]: \"start\"\n    ✅ Added to args: \"start\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [start]\n✅ Starting Claude Flow MCP server in stdio mode...\n[2025-07-21T10:33:05.871Z] INFO [claude-flow-mcp] Server initialized (session-cf-1753093985869-dJJz)\n[2025-07-21T10:33:05.875Z] ERROR [claude-flow-mcp] Failed to initialize SwarmMemory: NOT NULL constraint failed: memory_store.key\n"
      },
      {
        "id": "tasks.create",
        "feature": {
          "command": "task create \"Test Task\"",
          "description": "Create a new task",
          "expectedOutput": {},
          "priority": "high"
        },
        "error": "Output mismatch",
        "expected": "/Task created|Created task/",
        "actual": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [create, Test Task]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, task, create, Test Task]\n  Processing arg[0]: \"create\"\n    ✅ Added to args: \"create\"\n  Processing arg[1]: \"Test Task\"\n    ✅ Added to args: \"Test Task\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [create, Test Task]\n❌ Usage: task create <type> \"<description>\"\nTypes: research, code, analysis, coordination, general\n"
      },
      {
        "id": "tasks.list",
        "feature": {
          "command": "task list",
          "description": "List all tasks",
          "expectedOutput": {},
          "priority": "high"
        },
        "error": "Output mismatch",
        "expected": "/Tasks:|ID|Status/",
        "actual": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [list]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, task, list]\n  Processing arg[0]: \"list\"\n    ✅ Added to args: \"list\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [list]\n✅ Task queue:\n📋 No active tasks (orchestrator not running)\n\nTask statuses: queued, running, completed, failed, cancelled\n"
      },
      {
        "id": "swarm.init",
        "feature": {
          "command": "swarm init --type mesh",
          "description": "Initialize swarm",
          "expectedOutput": {},
          "priority": "high"
        },
        "error": "spawnSync /bin/sh ETIMEDOUT",
        "output": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [init, --type, mesh]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, swarm, init, --type, mesh]\n  Processing arg[0]: \"init\"\n    ✅ Added to args: \"init\"\n  Processing arg[1]: \"--type\"\n    Flag detected: \"type\", next arg: \"mesh\"\n    ✅ Set flag \"type\" = \"mesh\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {\n  \"type\": \"mesh\"\n}\n  args: [init]\n🐝 Launching Claude Flow Swarm System...\n📋 Objective: init\n🎯 Strategy: auto\n🏗️  Mode: centralized\n🤖 Max Agents: 5\n\n🔓 Using --dangerously-skip-permissions by default for seamless swarm execution\n✓ Claude Code launched with swarm coordination prompt!\n\n🚀 The swarm coordination instructions have been injected into Claude Code\n   The prompt includes:\n   • Strategy-specific guidance for auto\n   • Coordination patterns for centralized mode\n   • Recommended agents and MCP tool usage\n   • Complete workflow documentation\n\n"
      },
      {
        "id": "mcp.tools",
        "feature": {
          "command": "mcp list-tools",
          "description": "List MCP tools",
          "expectedOutput": {},
          "priority": "high"
        },
        "error": "Output mismatch",
        "expected": "/Available tools:|swarm_init|memory_usage/",
        "actual": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [list-tools]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, mcp, list-tools]\n  Processing arg[0]: \"list-tools\"\n    ✅ Added to args: \"list-tools\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [list-tools]\n🔧 Claude-Flow MCP Server Commands:\n\nCOMMANDS:\n  status                           Show MCP server status\n  start [options]                  Start MCP server with orchestrator\n  stop                             Stop MCP server gracefully\n  tools [options]                  List available tools & resources\n  auth <setup|status|rotate>       Manage authentication\n  config                           Show comprehensive configuration\n\nSTART OPTIONS:\n  --port <port>                    Server port (default: 3000)\n  --host <host>                    Server host (default: localhost)\n  --auto-orchestrator              Auto-start orchestrator with neural/WASM\n  --daemon                         Run in background daemon mode\n  --enable-neural                  Enable neural network features\n  --enable-wasm                    Enable WASM SIMD optimization\n\nTOOLS OPTIONS:\n  --category <cat>                 Filter by category (swarm, neural, memory, etc.)\n  --verbose, -v                    Show detailed tool information\n  --examples                       Show usage examples\n\nCATEGORIES:\n  swarm        🐝 Swarm coordination (12 tools)\n  neural       🧠 Neural networks & AI (15 tools)\n  memory       💾 Memory & persistence (12 tools)\n  analysis     📊 Analysis & monitoring (13 tools)\n  workflow     🔧 Workflow & automation (11 tools)\n  github       🐙 GitHub integration (8 tools)\n  daa          🤖 Dynamic Agent Architecture (8 tools)\n  system       ⚙️ System & utilities (8 tools)\n\nEXAMPLES:\n  claude-flow mcp status\n  claude-flow mcp start --auto-orchestrator --daemon\n  claude-flow mcp tools --category=neural --verbose\n  claude-flow mcp tools --category=swarm\n  claude-flow mcp config\n  claude-flow mcp auth setup\n\n🎯 Total: 87 tools & resources available\n🔗 Full ruv-swarm + DAA + Claude-Flow integration\n"
      },
      {
        "id": "memory.store",
        "feature": {
          "command": "memory store test-key \"test value\"",
          "description": "Store memory value",
          "expectedOutput": {},
          "priority": "high"
        },
        "error": "Output mismatch",
        "expected": "/Stored|Memory saved/",
        "actual": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [store, test-key, test value]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, memory, store, test-key, test value]\n  Processing arg[0]: \"store\"\n    ✅ Added to args: \"store\"\n  Processing arg[1]: \"test-key\"\n    ✅ Added to args: \"test-key\"\n  Processing arg[2]: \"test value\"\n    ✅ Added to args: \"test value\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [store, test-key, test value]\n❌ Failed to store: fs is not defined\n"
      },
      {
        "id": "swarm.status",
        "feature": {
          "command": "swarm status",
          "description": "Check swarm status",
          "expectedOutput": {},
          "priority": "medium"
        },
        "error": "spawnSync /bin/sh ETIMEDOUT",
        "output": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [status]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, swarm, status]\n  Processing arg[0]: \"status\"\n    ✅ Added to args: \"status\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [status]\n🐝 Launching Claude Flow Swarm System...\n📋 Objective: status\n🎯 Strategy: auto\n🏗️  Mode: centralized\n🤖 Max Agents: 5\n\n🔓 Using --dangerously-skip-permissions by default for seamless swarm execution\n✓ Claude Code launched with swarm coordination prompt!\n\n🚀 The swarm coordination instructions have been injected into Claude Code\n   The prompt includes:\n   • Strategy-specific guidance for auto\n   • Coordination patterns for centralized mode\n   • Recommended agents and MCP tool usage\n   • Complete workflow documentation\n\n"
      },
      {
        "id": "mcp.stop",
        "feature": {
          "command": "mcp stop",
          "description": "Stop MCP server",
          "expectedOutput": {},
          "priority": "medium"
        },
        "error": "Output mismatch",
        "expected": "/MCP server stopped|Shutting down/",
        "actual": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [stop]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, mcp, stop]\n  Processing arg[0]: \"stop\"\n    ✅ Added to args: \"stop\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [stop]\n✅ Stopping MCP server...\n🛑 Server would be gracefully shut down\n📝 Active connections would be closed\n💾 State would be persisted\n"
      },
      {
        "id": "memory.list",
        "feature": {
          "command": "memory list",
          "description": "List memory keys",
          "expectedOutput": {},
          "priority": "medium"
        },
        "error": "Output mismatch",
        "expected": "/Memory keys:|test-key/",
        "actual": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [list]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, memory, list]\n  Processing arg[0]: \"list\"\n    ✅ Added to args: \"list\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [list]\n⚠️  No namespaces found\n"
      },
      {
        "id": "hooks.preTask",
        "feature": {
          "command": "hooks pre-task --description \"Test task\"",
          "description": "Pre-task hook",
          "expectedOutput": {},
          "priority": "medium"
        },
        "error": "[2025-07-21T10:33:18.904Z] INFO [memory-store] Initialized SQLite at: /Users/elniak/Documents/Project/claude-code-flow/.swarm/memory.db\n",
        "output": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [pre-task, --description, Test task]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, hooks, pre-task, --description, Test task]\n  Processing arg[0]: \"pre-task\"\n    ✅ Added to args: \"pre-task\"\n  Processing arg[1]: \"--description\"\n    Flag detected: \"description\", next arg: \"Test task\"\n    ✅ Set flag \"description\" = \"Test task\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {\n  \"description\": \"Test task\"\n}\n  args: [pre-task]\n🔄 Executing pre-task hook...\n📋 Task: Test task\n🆔 Task ID: task-1753093998899-lspoh974f\n  💾 Saved to .swarm/memory.db\n"
      },
      {
        "id": "templates.list",
        "feature": {
          "command": "template list",
          "description": "List templates",
          "expectedOutput": {},
          "priority": "medium"
        },
        "error": "❌ Error: Unknown command: template\n",
        "output": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [list]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, template, list]\n  Processing arg[0]: \"list\"\n    ✅ Added to args: \"list\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [list]\nRun \"claude-flow help\" for available commands\n"
      },
      {
        "id": "templates.generate",
        "feature": {
          "command": "template generate agent --name TestAgent",
          "description": "Generate from template",
          "expectedOutput": {},
          "priority": "medium"
        },
        "error": "❌ Error: Unknown command: template\n",
        "output": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [generate, agent, --name, TestAgent]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, template, generate, agent, --name, TestAgent]\n  Processing arg[0]: \"generate\"\n    ✅ Added to args: \"generate\"\n  Processing arg[1]: \"agent\"\n    ✅ Added to args: \"agent\"\n  Processing arg[2]: \"--name\"\n    Flag detected: \"name\", next arg: \"TestAgent\"\n    ✅ Set flag \"name\" = \"TestAgent\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {\n  \"name\": \"TestAgent\"\n}\n  args: [generate, agent]\nRun \"claude-flow help\" for available commands\n"
      },
      {
        "id": "hooks.sessionEnd",
        "feature": {
          "command": "hooks session-end",
          "description": "Session end hook",
          "expectedOutput": {},
          "priority": "low"
        },
        "error": "Output mismatch",
        "expected": "/Session ended|Summary generated/",
        "actual": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [session-end]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, hooks, session-end]\n  Processing arg[0]: \"session-end\"\n    ✅ Added to args: \"session-end\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [session-end]\n🔚 Executing session-end hook...\n\n📊 SESSION SUMMARY:\n  📋 Tasks: 402\n  ✏️  Edits: 468\n  💾 Session saved to .swarm/memory.db\n✅ ✅ Session-end hook completed\n"
      },
      {
        "id": "monitoring.benchmark",
        "feature": {
          "command": "benchmark run",
          "description": "Run benchmarks",
          "expectedOutput": {},
          "timeout": 10000,
          "priority": "low"
        },
        "error": "❌ Error: Unknown command: benchmark\n",
        "output": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [run]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, benchmark, run]\n  Processing arg[0]: \"run\"\n    ✅ Added to args: \"run\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [run]\nRun \"claude-flow help\" for available commands\n"
      },
      {
        "id": "monitoring.metrics",
        "feature": {
          "command": "metrics show",
          "description": "Show metrics",
          "expectedOutput": {},
          "priority": "low"
        },
        "error": "❌ Error: Unknown command: metrics\n",
        "output": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [show]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, metrics, show]\n  Processing arg[0]: \"show\"\n    ✅ Added to args: \"show\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [show]\nRun \"claude-flow help\" for available commands\n"
      },
      {
        "id": "integration.github",
        "feature": {
          "command": "github analyze ruvnet/claude-flow",
          "description": "GitHub repository analysis",
          "expectedOutput": {},
          "priority": "low",
          "skipOffline": true
        },
        "error": "Output mismatch",
        "expected": "/Repository:|Stars|Issues/",
        "actual": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [analyze, ruvnet/claude-flow]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, github, analyze, ruvnet/claude-flow]\n  Processing arg[0]: \"analyze\"\n    ✅ Added to args: \"analyze\"\n  Processing arg[1]: \"ruvnet/claude-flow\"\n    ✅ Added to args: \"ruvnet/claude-flow\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [analyze, ruvnet/claude-flow]\n❌ ❌ Unknown GitHub mode: analyze\n\nAvailable modes:\n  gh-coordinator - GitHub workflow orchestration and coordination\n  pr-manager - Pull request management with multi-reviewer coordination\n  issue-tracker - Issue management and project coordination\n  release-manager - Release coordination and deployment pipelines\n  repo-architect - Repository structure optimization\n  sync-coordinator - Multi-package synchronization and version alignment\n"
      },
      {
        "id": "integration.webSearch",
        "feature": {
          "command": "search \"Claude Flow features\"",
          "description": "Web search integration",
          "expectedOutput": {},
          "priority": "low",
          "skipOffline": true
        },
        "error": "❌ Error: Unknown command: search\n",
        "output": "🚀 Starting Claude Flow with EMERGENCY MEMORY OPTIMIZATION...\n🚀 Starting Claude Flow with Memory Optimization...\n📊 System Resources:\n   Total Memory: 24576MB\n   CPU Cores: 10\n   Target Agents: 6\n🧠 Memory Configuration:\n   Max Heap Size: 12288MB\n   Initial Heap Size: 3072MB\n   Semi Space Size: 192MB\n   Executable Size: 1536MB\n⚖️ Using balanced GC strategy\n🔧 Node.js Flags: --max-old-space-size=12288 --max-semi-space-size=192 --initial-old-space-size=3072 --max-executable-size=1536 --expose-gc --gc-interval=50 --concurrent-marking\n🚨 Activating emergency memory management...\n🚀 Starting application...\n🔍 [DEEP DEBUG] parseFlags called with args: [Claude Flow features]\n🔍 [DEEP DEBUG] Original process.argv: [/opt/homebrew/Cellar/node/23.11.0/bin/node, /Users/elniak/Documents/Project/claude-code-flow/dist/cli/simple-cli.js, search, Claude Flow features]\n  Processing arg[0]: \"Claude Flow features\"\n    ✅ Added to args: \"Claude Flow features\"\n🎯 [DEEP DEBUG] parseFlags result:\n  flags: {}\n  args: [Claude Flow features]\nRun \"claude-flow help\" for available commands\n"
      }
    ],
    "skipped": [
      {
        "id": "swarm.spawn",
        "reason": "Requires swarm.init",
        "feature": {
          "command": "swarm spawn researcher",
          "description": "Spawn an agent",
          "expectedOutput": {},
          "priority": "high",
          "requires": [
            "swarm.init"
          ]
        }
      },
      {
        "id": "memory.retrieve",
        "reason": "Requires memory.store",
        "feature": {
          "command": "memory get test-key",
          "description": "Retrieve memory value",
          "expectedOutput": {},
          "priority": "high",
          "requires": [
            "memory.store"
          ]
        }
      },
      {
        "id": "tasks.complete",
        "reason": "Requires tasks.create",
        "feature": {
          "command": "task complete 1",
          "description": "Complete a task",
          "expectedOutput": {},
          "priority": "medium",
          "requires": [
            "tasks.create"
          ]
        }
      }
    ],
    "warnings": [],
    "performance": {
      "core.init": 259,
      "core.help": 318,
      "core.version": 7,
      "mcp.start": 5002,
      "tasks.create": 307,
      "tasks.list": 271,
      "swarm.init": 3004,
      "mcp.tools": 279,
      "memory.store": 308,
      "swarm.status": 3005,
      "mcp.stop": 396,
      "memory.list": 330,
      "hooks.preTask": 3009,
      "hooks.postEdit": 353,
      "templates.list": 287,
      "templates.generate": 257,
      "hooks.sessionEnd": 278,
      "monitoring.benchmark": 275,
      "monitoring.metrics": 298,
      "integration.github": 291,
      "integration.webSearch": 262
    },
    "timestamp": "2025-07-21T10:33:04.974Z"
  },
  "timestamp": "2025-07-21T10:33:23.778Z"
}
