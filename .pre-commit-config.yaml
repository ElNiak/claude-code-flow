# Pre-commit Configuration for Mortgage-nitor Project
# Optimized for 2025 best practices with modern tooling
# Supports: Python FastAPI backend, Kotlin Android app, PostgreSQL/TimescaleDB

repos:
  # =============================================================================
  # üîí SECURITY & SECRETS DETECTION (Priority 1)
  # =============================================================================

  # GitLeaks - Fast secrets detection (Golang-based, lightning fast)
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.0
    hooks:
      - id: gitleaks
        name: Detect hardcoded secrets
        description: Scan for API keys, passwords, tokens
        verbose: true
        args: ["--verbose"]
        exclude: '^(.*\.env\.example|.*docker-compose\.ya?ml|.*/conftest\.py)$'

  # detect-secrets - Comprehensive secrets baseline management (temporarily disabled due to baseline updates)
  # - repo: https://github.com/Yelp/detect-secrets
  #   rev: v1.4.0
  #   hooks:
  #     - id: detect-secrets
  #       name: Detect secrets baseline
  #       args: ["--baseline", ".secrets.baseline"]
  #       exclude: |
  #         (?x)^(
  #           .*\.lock$|
  #           .*\.log$|
  #           .*\.min\.js$|
  #           node_modules/.*|
  #           .*\.min\.css$|
  #           .*\.cache/.*|
  #           README\.md$|
  #           \.secrets\.baseline$|
  #           \.hive-mind/.*|
  #           \.mcp\.json$
  #         )$

  # =============================================================================
  # üêç PYTHON ECOSYSTEM (Ruff - 2025 Modern Approach)
  # =============================================================================

  # Ruff - Lightning-fast Python linter & formatter (replaces black, isort, flake8)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.9
    hooks:
      # Ruff formatter (auto-fixes line length, quotes, etc.)
      - id: ruff-format
        name: Ruff Python formatter
        types_or: [python, pyi]
      # Ruff linter with auto-fix
      - id: ruff
        name: Ruff Python linter
        types_or: [python, pyi]
        args: [--fix, --exit-non-zero-on-fix]

  # =============================================================================
  # ü§ñ KOTLIN/ANDROID HOOKS (Future-ready for mobile development)
  # =============================================================================

  # Ktlint - Kotlin code style and formatting
  - repo: https://github.com/macisamuele/language-formatters-pre-commit-hooks
    rev: v2.12.0
    hooks:
      - id: pretty-format-kotlin
        name: Kotlin code formatting
        args: [--autofix]
        files: \.kt$

  # =============================================================================
  # üóÑÔ∏è DATABASE & SQL VALIDATION
  # =============================================================================

  # SQLFluff - SQL linting for PostgreSQL/TimescaleDB
  - repo: https://github.com/sqlfluff/sqlfluff
    rev: 3.0.7
    hooks:
      - id: sqlfluff-lint
        name: SQL lint (PostgreSQL)
        args: [--dialect, postgres, --disable-progress-bar]
        types: [sql]
      - id: sqlfluff-fix
        name: SQL auto-fix
        args: [--dialect, postgres, --disable-progress-bar]
        types: [sql]

  # =============================================================================
  # üê≥ DOCKER & CONTAINERIZATION
  # =============================================================================

  # Hadolint - Dockerfile linting and security
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: Lint Dockerfiles
        args: [--failure-threshold, warning]

  # =============================================================================
  # üìÑ CONFIGURATION & DATA FILES
  # =============================================================================

  # YAML/JSON/Markdown formatting with Prettier
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: Format YAML/JSON/Markdown files
        types_or: [yaml, json, markdown]
        args: [--tab-width, "2", --prose-wrap, "always"]
        exclude: ^\.roo/|\.claude/|^node_modules/

  # JSON Schema validation
  - repo: https://github.com/python-jsonschema/check-jsonschema
    rev: 0.27.3
    hooks:
      - id: check-jsonschema
        name: Validate JSON schemas
        files: \.json$
        args: [--schemafile, "https://json.schemastore.org/package.json"]

  # =============================================================================
  # üìö DOCUMENTATION & MARKDOWN
  # =============================================================================

  # Markdownlint with auto-fix - Optimized for extensive architectural documentation
  - repo: https://github.com/DavidAnson/markdownlint-cli2
    rev: v0.13.0
    hooks:
      - id: markdownlint-cli2
        name: Lint and fix markdown files
        args: [--fix, --config, .markdownlint.yaml]
        exclude: ^\.roo/|\.claude/|^CLAUDE\.md$|^README\.md$|^ROADMAP\.md$|^PRE_COMMIT_SETUP\.md$|memory/

  # Markdown link checking
  - repo: https://github.com/tcort/markdown-link-check
    rev: v3.11.2
    hooks:
      - id: markdown-link-check
        name: Check markdown links
        args: [--config, .markdown-link-check.json]
        exclude: ^\.roo/|\.claude/

  # =============================================================================
  # üõ†Ô∏è GENERIC FILE VALIDATION
  # =============================================================================

  # Pre-commit built-in hooks for file validation
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # File content checks
      - id: check-yaml
        name: Check YAML syntax
      - id: check-json
        name: Check JSON syntax
      - id: check-toml
        name: Check TOML syntax
      - id: check-xml
        name: Check XML syntax

      # File structure checks
      - id: check-added-large-files
        name: Check for large files
        args: [--maxkb=1000]
      - id: check-case-conflict
        name: Check filename case conflicts
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: check-symlinks
        name: Check for broken symlinks

      # Content quality checks
      - id: end-of-file-fixer
        name: Fix end of files
        exclude: node_modules/
      - id: trailing-whitespace
        name: Trim trailing whitespace
        args: [--markdown-linebreak-ext=md]
      - id: mixed-line-ending
        name: Fix mixed line endings
        args: [--fix=lf]

  # =============================================================================
  # üîç CODE QUALITY & ANALYSIS
  # =============================================================================

  # Bandit - Python security analysis (for sensitive financial data)
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: Python security analysis
        args: [-r, --skip, B101]
        types: [python]

# =============================================================================
# ‚öôÔ∏è GLOBAL PRE-COMMIT CONFIGURATION
# =============================================================================

# Default language version (can be overridden per hook)
default_language_version:
  python: python3.11

# Install timeout for package managers
default_install_hook_types: [pre-commit, pre-push]

# Minimum pre-commit version required
minimum_pre_commit_version: 3.6.0

# Configure which hooks run on which Git operations
ci:
  # Skip expensive hooks in CI for speed
  skip: [sqlfluff-lint, hadolint-docker, markdown-link-check]
  # Run checks on main branch commits
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  submodules: false
