#!/usr/bin/env node
/**
 * Real-World Task Demonstration
 *
 * Shows how the enhanced task system works with actual development scenarios
 */

import chalk from "chalk";

// Simulated CLI usage examples
function demonstrateRealWorldUsage() {
	console.log(chalk.bold.cyan("üåç REAL-WORLD TASK VALIDATION DEMO"));
	console.log(
		chalk.gray(
			"Demonstrating enhanced Claude Flow task system with practical examples\n",
		),
	);

	console.log(chalk.bold("üìã Example 1: API Development Task"));
	console.log(chalk.gray("‚îÄ".repeat(50)));
	console.log(chalk.white("Command:"));
	console.log(chalk.green("npx claude-flow hive-mind task \\"));
	console.log(
		chalk.green('  "Implement REST API for user management with JWT auth" \\'),
	);
	console.log(
		chalk.green("  --spec examples/task-spec-templates/api-spec.yaml \\"),
	);
	console.log(chalk.green("  --validation-mode advisory \\"));
	console.log(chalk.green("  --priority high"));

	console.log(chalk.blue("\nüìä Expected Output:"));
	console.log(chalk.green("‚úÖ Task validation passed"));
	console.log(chalk.blue("üìã Task Details:"));
	console.log(chalk.blue("   Task ID: task_api_001"));
	console.log(chalk.blue("   Priority: üî¥ high"));
	console.log(chalk.blue("   Strategy: adaptive"));
	console.log(chalk.blue("   Status: pending"));
	console.log(chalk.blue("üîç Validation Summary:"));
	console.log(chalk.blue("   Specification Compliant: ‚úÖ"));
	console.log(chalk.blue("   Risk Level: üü¢ low"));
	console.log(chalk.blue("   Confidence: 92.5%"));

	console.log(chalk.bold("\nüìã Example 2: Frontend Component Task"));
	console.log(chalk.gray("‚îÄ".repeat(50)));
	console.log(chalk.white("Command:"));
	console.log(chalk.green("npx claude-flow hive-mind task \\"));
	console.log(
		chalk.green(
			'  "Create responsive user profile component with accessibility" \\',
		),
	);
	console.log(chalk.green("  --generate-spec frontend \\"));
	console.log(chalk.green("  --spec-output profile-component-spec.yaml \\"));
	console.log(chalk.green("  --validate"));

	console.log(chalk.blue("\nüìä Expected Output:"));
	console.log(chalk.green("‚úÖ Specification generated successfully!"));
	console.log(chalk.blue("üìã Generated Specification:"));
	console.log(chalk.blue("   Type: frontend"));
	console.log(chalk.blue("   Confidence: 87.3%"));
	console.log(chalk.blue("   Preconditions: 3 files, 3 tools"));
	console.log(chalk.blue("   Outputs: 4 expected"));
	console.log(
		chalk.green("‚úÖ Specification saved to: profile-component-spec.yaml"),
	);

	console.log(chalk.bold("\nüìã Example 3: Data Processing Task"));
	console.log(chalk.gray("‚îÄ".repeat(50)));
	console.log(chalk.white("Command:"));
	console.log(chalk.green("npx claude-flow hive-mind task \\"));
	console.log(
		chalk.green(
			'  "Process customer transaction data and generate monthly reports" \\',
		),
	);
	console.log(chalk.green("  --interactive \\"));
	console.log(chalk.green("  --validation-mode strict"));

	console.log(chalk.blue("\nüìä Interactive Prompts:"));
	console.log(chalk.yellow("? Select task priority: ‚ñ∏ high"));
	console.log(
		chalk.yellow(
			"? Select execution strategy: ‚ñ∏ Parallel (Fast, multiple agents)",
		),
	);
	console.log(
		chalk.yellow("? Require consensus for critical decisions? ‚ñ∏ Yes"),
	);
	console.log(chalk.yellow("? Maximum agents to assign: ‚ñ∏ 5"));
	console.log(
		chalk.yellow(
			"? Required agent capabilities: ‚ñ∏ data_analysis, pattern_recognition",
		),
	);

	console.log(chalk.blue("\nüìä Validation Results:"));
	console.log(chalk.yellow("‚ö†Ô∏è Task has validation warnings"));
	console.log(chalk.yellow("‚ö†Ô∏è Warnings:"));
	console.log(
		chalk.yellow(
			"  ‚Ä¢ Large dataset processing may require memory optimization",
		),
	);
	console.log(
		chalk.yellow("  ‚Ä¢ Consider breaking into smaller batch operations"),
	);
	console.log(chalk.green("‚úÖ Task submitted successfully!"));

	console.log(chalk.bold("\nüìã Example 4: Critical System Task (Strict Mode)"));
	console.log(chalk.gray("‚îÄ".repeat(50)));
	console.log(chalk.white("Command:"));
	console.log(chalk.green("npx claude-flow hive-mind task \\"));
	console.log(
		chalk.green('  "Implement secure payment processing with encryption" \\'),
	);
	console.log(chalk.green("  --validation-mode strict \\"));
	console.log(chalk.green("  --priority critical"));

	console.log(chalk.blue("\nüìä Strict Validation Output:"));
	console.log(chalk.red("‚ùå Task validation failed"));
	console.log(chalk.red("üö® Validation Issues:"));
	console.log(chalk.red("  ‚Ä¢ Missing security compliance specification"));
	console.log(chalk.red("  ‚Ä¢ No encryption standards defined"));
	console.log(chalk.red("  ‚Ä¢ PCI DSS requirements not addressed"));
	console.log(chalk.blue("üí° Suggestions:"));
	console.log(chalk.blue("  ‚Ä¢ Add formal security specification"));
	console.log(
		chalk.blue("  ‚Ä¢ Define encryption algorithms and key management"),
	);
	console.log(chalk.blue("  ‚Ä¢ Include compliance validation steps"));

	console.log(chalk.bold("\nüìã Example 5: Machine Learning Task"));
	console.log(chalk.gray("‚îÄ".repeat(50)));
	console.log(chalk.white("Command:"));
	console.log(chalk.green("npx claude-flow hive-mind task \\"));
	console.log(
		chalk.green(
			'  "Train sentiment analysis model on customer feedback data" \\',
		),
	);
	console.log(chalk.green("  --generate-spec ml \\"));
	console.log(chalk.green("  --validate \\"));
	console.log(chalk.green("  --assign-to specialist"));

	console.log(chalk.blue("\nüìä ML Task Results:"));
	console.log(chalk.green("‚úÖ Specification generated successfully!"));
	console.log(chalk.green("‚úÖ Task validation passed"));
	console.log(chalk.blue("üìã Task Details:"));
	console.log(chalk.blue("   Task ID: task_ml_sentiment_001"));
	console.log(chalk.blue("   Assigned to: specialist"));
	console.log(
		chalk.blue("   Required Capabilities: pattern_recognition, data_analysis"),
	);
	console.log(chalk.blue("üîç Validation Summary:"));
	console.log(
		chalk.blue("   Expected Outputs: model.pkl, evaluation.json, metrics.csv"),
	);
	console.log(
		chalk.blue("   Quality Requirements: accuracy ‚â• 85%, precision ‚â• 80%"),
	);
	console.log(chalk.blue("   Resource Requirements: 8GB RAM, 4 CPU cores"));

	console.log(chalk.bold("\nüìã Example 6: Specification File Usage"));
	console.log(chalk.gray("‚îÄ".repeat(50)));
	console.log(chalk.white("1. Create specification file (api-task.yaml):"));
	console.log(
		chalk.gray(`
name: "User Authentication API"
description: "Secure JWT-based authentication system"
preconditions:
  files:
    - path: "src/types/user.ts"
      type: "exists"
  tools:
    - name: "node"
      version: ">=18.0.0"
postconditions:
  outputs:
    - type: "file"
      path: "src/auth/jwt.ts"
    - type: "file"
      path: "tests/auth.test.ts"
  quality:
    coverage: 90
verification:
  static:
    - tool: "typescript"
  dynamic:
    - type: "unit"
      framework: "jest"
  `),
	);

	console.log(chalk.white("2. Use specification with task:"));
	console.log(chalk.green("npx claude-flow hive-mind task \\"));
	console.log(chalk.green('  "Implement JWT authentication system" \\'));
	console.log(chalk.green("  --spec api-task.yaml \\"));
	console.log(chalk.green("  --watch"));

	console.log(chalk.blue("\nüìä Watching Output:"));
	console.log(chalk.green("‚úÖ Task validation passed"));
	console.log(chalk.blue("üëÄ Watching task progress..."));
	console.log(chalk.blue("Progress |‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 100% | Completed"));
	console.log(chalk.blue("üìä Task Result:"));
	console.log(chalk.blue("   Status: completed"));
	console.log(chalk.blue("   Duration: 4m 32s"));
	console.log(
		chalk.blue("   Files Created: src/auth/jwt.ts, tests/auth.test.ts"),
	);
	console.log(chalk.blue("   Test Coverage: 92%"));

	console.log(chalk.bold.green("\nüéâ REAL-WORLD VALIDATION BENEFITS"));
	console.log(chalk.gray("‚ïê".repeat(60)));
	console.log(
		chalk.green("‚úÖ Pre-execution validation prevents impossible tasks"),
	);
	console.log(
		chalk.green("‚úÖ Specification files ensure consistent task definitions"),
	);
	console.log(
		chalk.green("‚úÖ Auto-generation reduces specification creation time"),
	);
	console.log(
		chalk.green("‚úÖ Risk assessment helps prioritize task execution"),
	);
	console.log(chalk.green("‚úÖ Quality requirements ensure reliable outputs"));
	console.log(
		chalk.green("‚úÖ Performance monitoring tracks execution efficiency"),
	);
	console.log(
		chalk.green("‚úÖ Backward compatibility maintains existing workflows"),
	);

	console.log(chalk.bold.blue("\nüöÄ Ready for Production Use!"));
	console.log(
		chalk.blue("The enhanced task system provides formal validation while"),
	);
	console.log(
		chalk.blue("maintaining the simplicity and power of Claude Flow."),
	);
}

// CLI execution
if (import.meta.url === `file://${process.argv[1]}`) {
	demonstrateRealWorldUsage();
}

export { demonstrateRealWorldUsage };
