# .pre-commit-config.yaml — Enterprise-grade AI Agent Coordination Platform
# Improved configuration with best practices for Claude Flow (2025)
#
# This configuration addresses the future merger implementation plan by:
# 1. Ensuring code quality during the 6-week modernization process
# 2. Adding security checks for MCP server integrations
# 3. Optimizing for TypeScript-first development
# 4. Supporting Docker containerization workflows
# 5. Enforcing enterprise-grade compliance standards

default_language_version:
  node: v23.11.0
  python: python3.11

repos:
  # =================================================================
  # 1 — SECURITY & VULNERABILITY SCANNING (CRITICAL)
  # =================================================================
  # Essential for production AI/MCP deployments

  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: Detect hardcoded secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: package-lock.json

  - repo: https://github.com/trufflesecurity/trufflehog
    rev: v3.82.13
    hooks:
      - id: trufflehog
        name: TruffleHog secret scanner
        entry: trufflehog git file://. --since-commit HEAD --only-verified --fail
        language: system

  - repo: local
    hooks:
      - id: npm-audit
        name: NPM Security Audit
        entry: npm audit --audit-level=moderate
        language: system
        pass_filenames: false

      - id: security-eslint
        name: Security-focused ESLint
        entry: npx eslint --config .eslintrc.security.js
        language: system
        files: \.(js|ts|jsx|tsx)$
        args: ['--fix']

  # =================================================================
  # 2 — DOCKER & CONTAINER SECURITY
  # =================================================================
  # Critical for the multiple Docker implementations in the project

  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: Lint Dockerfiles
        args: ['--config', '.hadolint.yaml']

  - repo: https://github.com/bridgecrewio/checkov
    rev: '3.2.0'
    hooks:
      - id: checkov
        name: Checkov Docker Security
        args: ['-d', '.', '--framework', 'dockerfile', '--quiet']

  - repo: local
    hooks:
      - id: docker-compose-validation
        name: Docker Compose Validation
        entry: bash -c 'for f in docker-compose*.yml docker-compose*.yaml; do [ -f "$f" ] && docker-compose -f "$f" config -q; done'
        language: system
        files: docker-compose.*\.ya?ml$

  # =================================================================
  # 3 — ADVANCED CODE QUALITY
  # =================================================================
  # Enhanced from basic Biome to comprehensive quality checks

  - repo: https://github.com/biomejs/pre-commit
    rev: v0.5.0
    hooks:
      - id: biome-check
        name: Biome Format + Lint + Fix
        args: [--staged, --apply]
        types_or: [js, jsx, ts, tsx, json, md, yml]

  - repo: local
    hooks:
      - id: typescript-strict
        name: TypeScript Strict Mode Check
        entry: npx tsc --noEmit --strict
        language: system
        types: [ts, tsx]
        exclude: node_modules/

      - id: code-complexity
        name: Code Complexity Analysis
        entry: npx complexity-report --format json --output complexity.json
        language: system
        files: \.(js|ts|jsx|tsx)$

      - id: duplicate-code
        name: Duplicate Code Detection
        entry: npx jscpd --threshold 5 --min-lines 10 --min-tokens 70
        language: system
        files: \.(js|ts|jsx|tsx)$

      - id: unused-dependencies
        name: Unused Dependencies Check
        entry: npx depcheck --ignores="@types/*,eslint-*,prettier,jest,tsx,@modelcontextprotocol/*"
        language: system
        pass_filenames: false

  # =================================================================
  # 4 — TESTING & COVERAGE ENFORCEMENT
  # =================================================================
  # Critical for AI agent reliability and the merger implementation

  - repo: local
    hooks:
      - id: jest-coverage
        name: Jest Coverage Threshold
        entry: npm run test:coverage -- --passWithNoTests --coverageThreshold='{"global":{"branches":75,"functions":75,"lines":80,"statements":80}}'
        language: system
        pass_filenames: false

      - id: unit-tests
        name: Unit Tests
        entry: npm run test:unit
        language: system
        pass_filenames: false

      - id: integration-tests
        name: Integration Tests (Critical)
        entry: npm run test:integration
        language: system
        pass_filenames: false

      - id: hallucination-tests
        name: Anti-Hallucination Tests
        entry: npm run test:hallucination:validation
        language: system
        pass_filenames: false

  # =================================================================
  # 5 — DOCUMENTATION & STANDARDS
  # =================================================================
  # Enhanced for the extensive documentation in the project

  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        name: Markdown Linting
        args: ['--fix', '--ignore', 'node_modules', '--ignore', 'CHANGELOG.md']

  - repo: https://github.com/get-alex/alex
    rev: v10.0.0
    hooks:
      - id: alex
        name: Inclusive Language Check
        exclude: node_modules/

  - repo: local
    hooks:
      - id: docs-links
        name: Documentation Links Check
        entry: npx markdown-link-check --quiet
        language: system
        files: \.(md)$

      - id: api-docs
        name: API Documentation Check
        entry: npx typedoc --emit none --treatWarningsAsErrors
        language: system
        files: src/.*\.(ts)$

  # =================================================================
  # 6 — PERFORMANCE & OPTIMIZATION
  # =================================================================
  # Critical for AI agent coordination performance

  - repo: local
    hooks:
      - id: bundle-size
        name: Bundle Size Check
        entry: npx bundlesize
        language: system
        pass_filenames: false

      - id: memory-leaks
        name: Memory Leak Detection
        entry: npx clinic doctor --on-port 'npm run test:performance'
        language: system
        pass_filenames: false

      - id: performance-budget
        name: Performance Budget
        entry: npx lighthouse-ci --budget-path .lighthouserc.js
        language: system
        pass_filenames: false

  # =================================================================
  # 7 — COMPLIANCE & GOVERNANCE
  # =================================================================
  # Enterprise requirements for production deployment

  - repo: local
    hooks:
      - id: license-check
        name: License Compliance
        entry: npx license-checker --production --onlyAllow "MIT;BSD-2-Clause;BSD-3-Clause;Apache-2.0;ISC;0BSD;Unlicense"
        language: system
        pass_filenames: false

      - id: dependency-audit
        name: Dependency Audit
        entry: npx audit-ci --config .audit-ci.json
        language: system
        pass_filenames: false

      - id: code-ownership
        name: Code Ownership Check
        entry: npx codeowners-validator .github/CODEOWNERS
        language: system
        pass_filenames: false

  # =================================================================
  # 8 — ENHANCED GENERIC CHECKS
  # =================================================================
  # Comprehensive file system and structure validation

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.7.0
    hooks:
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: check-added-large-files
        args: ['--maxkb=2000']  # Increased for AI model files
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-json
      - id: check-yaml
        exclude: .github/workflows/  # GitHub Actions may have special syntax
      - id: check-toml
      - id: check-xml
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: ['--fix=lf']
      - id: check-ast
        types: [python]
      - id: debug-statements
        types: [python]
      - id: name-tests-test
        args: ['--pytest-test-first']

  # =================================================================
  # 9 — TYPESCRIPT & NODE.JS SPECIFIC
  # =================================================================
  # Optimized for the TypeScript-first modernization

  - repo: local
    hooks:
      - id: typecheck-incremental
        name: TypeScript Incremental Check
        entry: npx tsc --noEmit --incremental
        language: system
        types: [ts, tsx]
        exclude: node_modules/

      - id: node-version-check
        name: Node.js Version Check
        entry: node --version | grep -q "v23.11.0" || (echo "Node.js v23.11.0 required" && exit 1)
        language: system
        pass_filenames: false

      - id: package-json-lint
        name: Package.json Linting
        entry: npx pkg-ok
        language: system
        files: package\.json$

      - id: tsconfig-check
        name: TSConfig Validation
        entry: npx tsc --showConfig > /dev/null
        language: system
        files: tsconfig.*\.json$

  # =================================================================
  # 10 — MCP & AI AGENT SPECIFIC VALIDATIONS
  # =================================================================
  # Custom validations for the AI agent coordination platform

  - repo: local
    hooks:
      - id: mcp-schema-validation
        name: MCP Schema Validation
        entry: npx ts-node scripts/validate-mcp-schemas.ts
        language: system
        files: src/mcp/.*\.(ts|js)$

      - id: agent-config-validation
        name: Agent Configuration Validation
        entry: npx ts-node scripts/validate-agent-configs.ts
        language: system
        files: .*agent.*\.json$

      - id: swarm-topology-check
        name: Swarm Topology Validation
        entry: npx ts-node scripts/validate-swarm-topology.ts
        language: system
        files: src/.*swarm.*\.(ts|js)$

      - id: coordination-protocol-check
        name: Coordination Protocol Validation
        entry: npx ts-node scripts/validate-coordination-protocols.ts
        language: system
        files: src/coordination/.*\.(ts|js)$

  # =================================================================
  # 11 — COMMIT MESSAGE VALIDATION
  # =================================================================
  # Enhanced conventional commit enforcement

  - repo: local
    hooks:
      - id: commitlint
        name: Conventional Commits
        entry: npx --no-install commitlint --edit $1
        language: system
        stages: [commit-msg]

      - id: commit-msg-length
        name: Commit Message Length
        entry: bash -c 'head -n1 "$1" | wc -c | awk "{if (\$1 > 100) {print \"Commit message too long (\" \$1 \" chars, max 100)\"; exit 1}}"'
        language: system
        stages: [commit-msg]

  # =================================================================
  # 12 — MERGER IMPLEMENTATION SUPPORT
  # =================================================================
  # Specific hooks to support the 6-week modernization process

  - repo: local
    hooks:
      - id: merger-compatibility
        name: Merger Compatibility Check
        entry: npx ts-node scripts/check-merger-compatibility.ts
        language: system
        files: src/.*\.(ts|js)$

      - id: legacy-code-detection
        name: Legacy Code Detection
        entry: bash -c 'grep -r "TODO.*REMOVE" src/ || true; grep -r "DEPRECATED" src/ || true'
        language: system
        pass_filenames: false

      - id: architecture-validation
        name: Architecture Validation
        entry: npx ts-node scripts/validate-architecture.ts
        language: system
        files: src/.*\.(ts|js)$

      - id: migration-readiness
        name: Migration Readiness Check
        entry: npx ts-node scripts/check-migration-readiness.ts
        language: system
        pass_filenames: false
