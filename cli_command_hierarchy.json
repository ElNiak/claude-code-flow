{
	"claude-flow": {
		"description": "Claude-Flow: Advanced AI agent orchestration system for multi-agent coordination",
		"version": "1.0.71",
		"global_options": [
			"-c, --config <path>",
			"-v, --verbose",
			"-q, --quiet",
			"--log-level <level>",
			"--no-color",
			"--json",
			"--profile <profile>"
		],
		"commands": {
			"start": {
				"description": "Start Claude-Flow processes and services",
				"module": "src/cli/commands/start.ts",
				"subcommands": {
					"process-manager": {
						"description": "Process management interface",
						"module": "src/cli/commands/start/process-manager.ts"
					},
					"system-monitor": {
						"description": "System monitoring interface",
						"module": "src/cli/commands/start/system-monitor.ts"
					},
					"process-ui": {
						"description": "Process UI interface",
						"module": "src/cli/commands/start/process-ui.ts"
					}
				}
			},
			"agent": {
				"description": "Comprehensive Agent management commands with advanced features",
				"module": "src/cli/commands/agent.ts",
				"subcommands": {
					"create": {
						"description": "Create a new agent",
						"options": [
							"-n, --name <name>",
							"-t, --type <type>",
							"-c, --capabilities <caps>",
							"-p, --profile <profile>",
							"--template <template>"
						]
					},
					"list": {
						"description": "List all agents",
						"options": [
							"-s, --status <status>",
							"-t, --type <type>",
							"--format <format>"
						]
					},
					"show": {
						"description": "Show detailed agent information",
						"arguments": ["<agent-id>"]
					},
					"start": {
						"description": "Start an agent",
						"arguments": ["<agent-id>"]
					},
					"stop": {
						"description": "Stop an agent",
						"arguments": ["<agent-id>"]
					},
					"delete": {
						"description": "Delete an agent",
						"arguments": ["<agent-id>"]
					}
				}
			},
			"task": {
				"description": "Manage tasks",
				"module": "src/cli/commands/task.ts",
				"subcommands": {
					"create": {
						"description": "Create a new task",
						"arguments": ["<type>", "<description>"],
						"options": [
							"-p, --priority <priority>",
							"-d, --dependencies <deps>",
							"-i, --input <input>",
							"-a, --assign <agent>"
						]
					},
					"list": {
						"description": "List all tasks",
						"options": ["-s, --status <status>", "-a, --agent <agent>"]
					},
					"status": {
						"description": "Get task status",
						"arguments": ["<task-id>"]
					},
					"cancel": {
						"description": "Cancel a task",
						"arguments": ["<task-id>"]
					}
				}
			},
			"memory": {
				"description": "Memory management commands",
				"module": "src/cli/commands/memory.ts",
				"subcommands": {
					"store": {
						"description": "Store a value in memory",
						"arguments": ["<key>", "<value>"],
						"options": ["-n, --namespace <namespace>"]
					},
					"get": {
						"description": "Retrieve a value from memory",
						"arguments": ["<key>"],
						"options": ["-n, --namespace <namespace>"]
					},
					"list": {
						"description": "List memory entries",
						"options": ["-n, --namespace <namespace>", "--format <format>"]
					},
					"delete": {
						"description": "Delete a memory entry",
						"arguments": ["<key>"],
						"options": ["-n, --namespace <namespace>"]
					},
					"clear": {
						"description": "Clear all memory entries",
						"options": ["-n, --namespace <namespace>", "--confirm"]
					}
				}
			},
			"config": {
				"description": "Configuration management",
				"module": "src/cli/commands/config.ts",
				"subcommands": {
					"show": {
						"description": "Show current configuration"
					},
					"set": {
						"description": "Set configuration value",
						"arguments": ["<key>", "<value>"]
					},
					"get": {
						"description": "Get configuration value",
						"arguments": ["<key>"]
					},
					"reset": {
						"description": "Reset configuration to defaults"
					}
				}
			},
			"status": {
				"description": "Show system status",
				"module": "src/cli/commands/status.ts"
			},
			"monitor": {
				"description": "Monitor system performance",
				"module": "src/cli/commands/monitor.ts"
			},
			"session": {
				"description": "Session management",
				"module": "src/cli/commands/session.ts"
			},
			"workflow": {
				"description": "Workflow management",
				"module": "src/cli/commands/workflow.ts"
			},
			"mcp": {
				"description": "MCP (Model Context Protocol) integration",
				"module": "src/cli/commands/mcp.ts"
			},
			"help": {
				"description": "Show help information",
				"module": "src/cli/commands/help.ts"
			},
			"sparc": {
				"description": "SPARC development mode commands",
				"module": "src/cli/commands/sparc.ts",
				"simple_commands_module": "src/cli/simple-commands/sparc.js",
				"subcommands": {
					"modes": {
						"description": "List available SPARC modes"
					},
					"info": {
						"description": "Show information about a specific mode",
						"arguments": ["<mode>"]
					},
					"run": {
						"description": "Run a SPARC mode",
						"arguments": ["<mode>", "<task>"],
						"options": [
							"--non-interactive, -n",
							"--dry-run, -d",
							"--verbose, -v",
							"--no-permissions",
							"--enable-permissions",
							"--namespace <value>",
							"--config <value>",
							"--interactive, -i"
						]
					},
					"tdd": {
						"description": "Test-driven development mode"
					}
				},
				"modes": {
					"orchestrator": "Multi-agent task orchestration",
					"swarm-coordinator": "Specialized swarm management",
					"workflow-manager": "Process automation",
					"batch-executor": "Parallel task execution",
					"coder": "Autonomous code generation",
					"architect": "System design",
					"reviewer": "Code review",
					"tdd": "Test-driven development",
					"researcher": "Deep research capabilities",
					"analyzer": "Code and data analysis",
					"optimizer": "Performance optimization",
					"designer": "UI/UX design",
					"innovator": "Creative problem solving",
					"documenter": "Documentation generation",
					"debugger": "Systematic debugging",
					"tester": "Comprehensive testing",
					"memory-manager": "Knowledge management"
				}
			},
			"swarm": {
				"description": "Self-orchestrating agent swarms using claude-flow",
				"module": "src/cli/commands/swarm.ts",
				"options": [
					"--dry-run",
					"--strategy <type>",
					"--max-agents <n>",
					"--timeout <minutes>",
					"--research",
					"--parallel",
					"--review",
					"--monitor",
					"--ui",
					"--background",
					"--distributed",
					"--memory-namespace <namespace>",
					"--persistence"
				],
				"strategies": ["auto", "research", "development", "analysis"]
			},
			"hive": {
				"description": "Multi-agent swarm coordination with consensus mechanisms",
				"module": "src/cli/commands/hive.ts",
				"options": [
					"--topology <type>",
					"--consensus <type>",
					"--max-agents <n>",
					"--timeout <minutes>",
					"--monitor",
					"--background",
					"--memory-namespace <namespace>",
					"--quality-threshold <threshold>",
					"--sparc"
				],
				"topologies": ["mesh", "hierarchical", "ring", "star"],
				"consensus_types": ["quorum", "unanimous", "weighted", "leader"],
				"agent_types": ["queen", "worker", "scout", "guardian", "architect"]
			},
			"hive-mind": {
				"description": "Hive Mind collective intelligence swarm management",
				"module": "src/cli/commands/hive-mind/index.ts",
				"subcommands": {
					"init": {
						"description": "Initialize hive mind system",
						"module": "src/cli/commands/hive-mind/init.ts"
					},
					"spawn": {
						"description": "Spawn hive mind agents",
						"module": "src/cli/commands/hive-mind/spawn.ts"
					},
					"status": {
						"description": "Show hive mind status",
						"module": "src/cli/commands/hive-mind/status.ts"
					},
					"task": {
						"description": "Manage hive mind tasks",
						"module": "src/cli/commands/hive-mind/task.ts"
					},
					"wizard": {
						"description": "Interactive wizard for hive mind setup",
						"module": "src/cli/commands/hive-mind/wizard.ts"
					},
					"optimize-memory": {
						"description": "Optimize memory usage",
						"module": "src/cli/commands/hive-mind/optimize-memory.ts"
					}
				}
			},
			"hook": {
				"description": "Hook system for automation and integration",
				"module": "src/cli/commands/hook.ts",
				"subcommands": {
					"pre-task": {
						"description": "Execute before starting a task",
						"options": ["--description <desc>", "--auto-spawn-agents <bool>"]
					},
					"post-task": {
						"description": "Execute after completing a task",
						"options": ["--task-id <id>", "--analyze-performance <bool>"]
					},
					"pre-edit": {
						"description": "Validate before file modifications"
					},
					"post-edit": {
						"description": "Auto-format and log edits",
						"options": ["--file <filepath>", "--memory-key <key>"]
					},
					"pre-bash": {
						"description": "Check command safety",
						"options": ["--command <cmd>"]
					},
					"post-bash": {
						"description": "Log command execution"
					},
					"pre-search": {
						"description": "Optimize search queries",
						"options": ["--query <query>", "--cache-results <bool>"]
					},
					"post-search": {
						"description": "Cache search results"
					},
					"session-start": {
						"description": "Initialize session"
					},
					"session-end": {
						"description": "Generate summary and save state",
						"options": ["--export-metrics <bool>", "--generate-summary <bool>"]
					},
					"session-restore": {
						"description": "Load previous session state",
						"options": ["--session-id <id>", "--load-memory <bool>"]
					},
					"notify": {
						"description": "Custom notifications",
						"options": [
							"--message <msg>",
							"--level <level>",
							"--telemetry <bool>"
						]
					},
					"mcp-initialized": {
						"description": "Persist MCP configuration"
					},
					"agent-spawned": {
						"description": "Update agent roster",
						"options": ["--name <name>", "--type <type>"]
					},
					"task-orchestrated": {
						"description": "Monitor task progress"
					},
					"neural-trained": {
						"description": "Save pattern improvements"
					}
				}
			},
			"repl": {
				"description": "Start interactive REPL mode with command completion",
				"options": ["--no-banner", "--history-file <path>"]
			},
			"version": {
				"description": "Show detailed version information",
				"options": ["--short"]
			},
			"completion": {
				"description": "Generate shell completion scripts",
				"arguments": ["[shell]"],
				"options": ["--install"]
			},
			"swarm-new": {
				"description": "Create new swarm configuration",
				"module": "src/cli/commands/swarm-new.ts"
			},
			"swarm-spawn": {
				"description": "Spawn new swarm agents",
				"module": "src/cli/commands/swarm-spawn.ts"
			},
			"enterprise": {
				"description": "Enterprise features and management",
				"module": "src/cli/commands/enterprise.ts"
			},
			"migrate": {
				"description": "Migration utilities",
				"module": "src/cli/commands/migrate.ts"
			},
			"features": {
				"description": "Feature management",
				"module": "src/cli/commands/features.ts"
			},
			"ruv-swarm": {
				"description": "RUV Swarm integration",
				"module": "src/cli/commands/ruv-swarm.ts"
			},
			"advanced-memory-commands": {
				"description": "Advanced memory management operations",
				"module": "src/cli/commands/advanced-memory-commands.ts"
			},
			"agent-simple": {
				"description": "Simplified agent commands",
				"module": "src/cli/commands/agent-simple.ts"
			},
			"claude": {
				"description": "Claude integration commands",
				"module": "src/cli/commands/claude.ts"
			},
			"config-integration": {
				"description": "Configuration integration utilities",
				"module": "src/cli/commands/config-integration.ts"
			}
		}
	}
}
